{
  "metadata": {
    "project_name": "src",
    "description": "README Generator - Automated README generation for Python projects.\n\nThis package provides a command-line tool that automatically generates comprehensive\nREADME files for Python projects using Large Language Model APIs. It intelligently\nparses and extracts key information from codebases to create high-quality documentation\nwithin LLM context window constraints.\n\nFeatures:\n- Comprehensive project analysis and parsing\n- Token-aware content optimization for LLM APIs\n- Multiple LLM provider support (Gemini, OpenAI, Claude)\n- Intelligent content prioritization\n- Error handling and graceful degradation",
    "version": "0.1.0",
    "author": "Your Name",
    "project_type": "cli_tool"
  },
  "dependencies": {},
  "structure": {
    "root_path": "/workspaces/SYSC4918/src",
    "main_package": "utils",
    "src_layout": false,
    "packages": [
      ".",
      "models",
      "parser",
      "utils"
    ],
    "modules": [
      {
        "name": "cli",
        "file_path": "/workspaces/SYSC4918/src/cli.py",
        "docstring": "Command-line interface for the README generator.\n\nThis module provides the main CLI functionality for automatically generating\ncomprehensive README files for Python projects using LLM APIs, specifically\noptimized for Gemini 2.5 Pro with 1M token context window.",
        "classes": [
          {
            "name": "CLIError",
            "docstring": "Custom exception for CLI errors.",
            "inheritance": [
              "Exception"
            ],
            "is_abstract": false,
            "is_dataclass": false,
            "is_enum": false,
            "line_number": 44,
            "file_path": "/workspaces/SYSC4918/src/cli.py"
          },
          {
            "name": "LLMAPIError",
            "docstring": "Custom exception for LLM API errors.",
            "inheritance": [
              "Exception"
            ],
            "is_abstract": false,
            "is_dataclass": false,
            "is_enum": false,
            "line_number": 49,
            "file_path": "/workspaces/SYSC4918/src/cli.py"
          }
        ],
        "functions": [
          {
            "name": "create_parser",
            "signature": "def create_parser() -> argparse.ArgumentParser",
            "docstring": "Create and configure the argument parser.",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 54,
            "file_path": "/workspaces/SYSC4918/src/cli.py",
            "return_type": "argparse.ArgumentParser",
            "complexity_score": 1
          },
          {
            "name": "validate_arguments",
            "signature": "def validate_arguments(args: argparse.Namespace) -> None",
            "docstring": "Validate command-line arguments.",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 211,
            "file_path": "/workspaces/SYSC4918/src/cli.py",
            "return_type": "None",
            "parameters": [
              {
                "name": "args",
                "type": "argparse.Namespace"
              }
            ],
            "complexity_score": 10
          },
          {
            "name": "validate_api_requirements",
            "signature": "def validate_api_requirements(model_name: str, api_key: Optional[str]) -> str",
            "docstring": "Validate API requirements and return the API key.",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 248,
            "file_path": "/workspaces/SYSC4918/src/cli.py",
            "return_type": "str",
            "parameters": [
              {
                "name": "model_name",
                "type": "str"
              },
              {
                "name": "api_key",
                "type": "Optional[str]"
              }
            ],
            "complexity_score": 10
          },
          {
            "name": "load_configuration",
            "signature": "def load_configuration(args: argparse.Namespace) -> Config",
            "docstring": "Load configuration from file and command-line arguments.",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 283,
            "file_path": "/workspaces/SYSC4918/src/cli.py",
            "return_type": "Config",
            "parameters": [
              {
                "name": "args",
                "type": "argparse.Namespace"
              }
            ],
            "complexity_score": 4
          },
          {
            "name": "generate_readme_with_llm",
            "signature": "async def generate_readme_with_llm(project_data: Any, config: Config, api_key: str) -> str",
            "docstring": "Generate README content using the specified LLM API.",
            "is_public": true,
            "is_async": true,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 313,
            "file_path": "/workspaces/SYSC4918/src/cli.py",
            "return_type": "str",
            "parameters": [
              {
                "name": "project_data",
                "type": "Any"
              },
              {
                "name": "config",
                "type": "Config"
              },
              {
                "name": "api_key",
                "type": "str"
              }
            ],
            "complexity_score": 6
          },
          {
            "name": "create_readme_prompt",
            "signature": "def create_readme_prompt(project_data: Dict[str, Any], project_name: str) -> str",
            "docstring": "Create a comprehensive prompt for README generation based on project requirements.",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 346,
            "file_path": "/workspaces/SYSC4918/src/cli.py",
            "return_type": "str",
            "parameters": [
              {
                "name": "project_data",
                "type": "Dict[str, Any]"
              },
              {
                "name": "project_name",
                "type": "str"
              }
            ],
            "complexity_score": 1
          },
          {
            "name": "generate_with_gemini",
            "signature": "async def generate_with_gemini(prompt: str, config: Config, api_key: str) -> str",
            "docstring": "Generate README using Gemini API (recommended model based on research).",
            "is_public": true,
            "is_async": true,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 380,
            "file_path": "/workspaces/SYSC4918/src/cli.py",
            "return_type": "str",
            "parameters": [
              {
                "name": "prompt",
                "type": "str"
              },
              {
                "name": "config",
                "type": "Config"
              },
              {
                "name": "api_key",
                "type": "str"
              }
            ],
            "complexity_score": 4
          },
          {
            "name": "generate_with_openai",
            "signature": "async def generate_with_openai(prompt: str, config: Config, api_key: str) -> str",
            "docstring": "Generate README using OpenAI API.",
            "is_public": true,
            "is_async": true,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 412,
            "file_path": "/workspaces/SYSC4918/src/cli.py",
            "return_type": "str",
            "parameters": [
              {
                "name": "prompt",
                "type": "str"
              },
              {
                "name": "config",
                "type": "Config"
              },
              {
                "name": "api_key",
                "type": "str"
              }
            ],
            "complexity_score": 5
          },
          {
            "name": "generate_with_claude",
            "signature": "async def generate_with_claude(prompt: str, config: Config, api_key: str) -> str",
            "docstring": "Generate README using Claude API (highest coding accuracy per research).",
            "is_public": true,
            "is_async": true,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 449,
            "file_path": "/workspaces/SYSC4918/src/cli.py",
            "return_type": "str",
            "parameters": [
              {
                "name": "prompt",
                "type": "str"
              },
              {
                "name": "config",
                "type": "Config"
              },
              {
                "name": "api_key",
                "type": "str"
              }
            ],
            "complexity_score": 5
          },
          {
            "name": "init_config_command",
            "signature": "def init_config_command(args: argparse.Namespace) -> None",
            "docstring": "Initialize a configuration file with project-specific defaults.",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 478,
            "file_path": "/workspaces/SYSC4918/src/cli.py",
            "return_type": "None",
            "parameters": [
              {
                "name": "args",
                "type": "argparse.Namespace"
              }
            ],
            "complexity_score": 2
          },
          {
            "name": "parse_and_generate_command",
            "signature": "async def parse_and_generate_command(args: argparse.Namespace, config: Config) -> None",
            "docstring": "Execute the main project parsing and README generation command.",
            "is_public": true,
            "is_async": true,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 503,
            "file_path": "/workspaces/SYSC4918/src/cli.py",
            "return_type": "None",
            "parameters": [
              {
                "name": "args",
                "type": "argparse.Namespace"
              },
              {
                "name": "config",
                "type": "Config"
              }
            ],
            "complexity_score": 16
          },
          {
            "name": "print_error",
            "signature": "def print_error(message: str) -> None",
            "docstring": "Print error message to stderr.",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 595,
            "file_path": "/workspaces/SYSC4918/src/cli.py",
            "return_type": "None",
            "parameters": [
              {
                "name": "message",
                "type": "str"
              }
            ],
            "complexity_score": 1
          },
          {
            "name": "print_warning",
            "signature": "def print_warning(message: str) -> None",
            "docstring": "Print warning message to stderr.",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 600,
            "file_path": "/workspaces/SYSC4918/src/cli.py",
            "return_type": "None",
            "parameters": [
              {
                "name": "message",
                "type": "str"
              }
            ],
            "complexity_score": 1
          },
          {
            "name": "main",
            "signature": "def main() -> None",
            "docstring": "Main CLI entry point.",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 605,
            "file_path": "/workspaces/SYSC4918/src/cli.py",
            "return_type": "None",
            "complexity_score": 10
          }
        ],
        "imports": [
          "os",
          "sys",
          "argparse",
          "time",
          "json",
          "asyncio",
          "from pathlib import Path",
          "from typing import Optional",
          "from typing import Dict",
          "from typing import Any",
          "from typing import List",
          "logging",
          "genai",
          "openai",
          "anthropic",
          "from config import Config",
          "from config import load_config",
          "from config import save_config",
          "from parser.project_parser import parse_project",
          "from utils.token_counter import TokenCounter",
          "from utils.token_counter import get_token_budget_allocation",
          "from utils.file_utils import create_directory",
          "from utils.file_utils import read_file_safely",
          "from utils.json_serializer import serialize_project_data",
          "from utils.json_serializer import save_json_to_file"
        ],
        "is_package": false,
        "is_main": false,
        "line_count": 657
      },
      {
        "name": "__init__",
        "file_path": "/workspaces/SYSC4918/src/__init__.py",
        "docstring": "README Generator - Automated README generation for Python projects.\n\nThis package provides a command-line tool that automatically generates comprehensive\nREADME files for Python projects using Large Language Model APIs. It intelligently\nparses and extracts key information from codebases to create high-quality documentation\nwithin LLM context window constraints.\n\nFeatures:\n- Comprehensive project analysis and parsing\n- Token-aware content optimization for LLM APIs\n- Multiple LLM provider support ...",
        "functions": [
          {
            "name": "get_version",
            "signature": "def get_version() -> str",
            "docstring": "Get the current version of the package.",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 66,
            "file_path": "/workspaces/SYSC4918/src/__init__.py",
            "return_type": "str",
            "complexity_score": 1
          },
          {
            "name": "get_package_info",
            "signature": "def get_package_info() -> dict",
            "docstring": "Get comprehensive package information.",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 70,
            "file_path": "/workspaces/SYSC4918/src/__init__.py",
            "return_type": "dict",
            "complexity_score": 1
          }
        ],
        "constants": [
          {
            "name": "DEFAULT_CONFIG",
            "value": "{'model_name': 'gemini_2_5_pro', 'max_tokens': 1000000, 'include_tests': False, 'include_private': False, 'output_format': 'markdown', 'verbose': False, 'cache_enabled': True, 'timeout': 90}",
            "type": "dict",
            "line_number": 55
          }
        ],
        "imports": [
          "from parser.project_parser import parse_project",
          "from parser.project_parser import parse_project_to_json",
          "from utils.token_counter import estimate_tokens",
          "from utils.token_counter import count_tokens_in_text",
          "from utils.content_prioritizer import prioritize_project_data",
          "from utils.json_serializer import serialize_project_data",
          "from config import Config",
          "from config import load_config",
          "from config import save_config"
        ],
        "is_package": true,
        "is_main": false,
        "line_count": 81
      },
      {
        "name": "__main__",
        "file_path": "/workspaces/SYSC4918/src/__main__.py",
        "docstring": "CLI entry point for the README generator package.\n\nThis module provides the main entry point when the package is run as a module\nusing 'python -m readme_generator'. It handles command-line argument parsing\nand delegates to the appropriate CLI functions.",
        "functions": [
          {
            "name": "setup_logging",
            "signature": "def setup_logging(verbose: bool=False)",
            "docstring": "Set up logging configuration.",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 24,
            "file_path": "/workspaces/SYSC4918/src/__main__.py",
            "parameters": [
              {
                "name": "verbose",
                "type": "bool",
                "default": "False"
              }
            ],
            "complexity_score": 1
          },
          {
            "name": "check_python_version",
            "signature": "def check_python_version()",
            "docstring": "Check if Python version is compatible.",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 48,
            "file_path": "/workspaces/SYSC4918/src/__main__.py",
            "complexity_score": 2
          },
          {
            "name": "handle_exceptions",
            "signature": "def handle_exceptions()",
            "docstring": "Set up global exception handling.",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 56,
            "file_path": "/workspaces/SYSC4918/src/__main__.py",
            "complexity_score": 2
          },
          {
            "name": "entry_point",
            "signature": "def entry_point()",
            "docstring": "Main entry point for the CLI application.",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 74,
            "file_path": "/workspaces/SYSC4918/src/__main__.py",
            "complexity_score": 3
          },
          {
            "name": "get_version",
            "signature": "def get_version()",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 108,
            "file_path": "/workspaces/SYSC4918/src/__main__.py",
            "complexity_score": 1
          }
        ],
        "imports": [
          "sys",
          "os",
          "logging",
          "from pathlib import Path",
          "from cli import main",
          "from readme_generator import get_version"
        ],
        "is_package": false,
        "is_main": true,
        "line_count": 111
      },
      {
        "name": "config",
        "file_path": "/workspaces/SYSC4918/src/config.py",
        "docstring": "Configuration management for the README generator.\n\nThis module handles loading, saving, and managing configuration settings\nfor the README generation tool, including model settings, parsing options,\nand output preferences.",
        "classes": [
          {
            "name": "Config",
            "docstring": "Configuration settings for the README generator.",
            "methods": [
              {
                "name": "__post_init__",
                "signature": "def __post_init__(self)",
                "docstring": "Post-initialization setup.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 96,
                "file_path": "/workspaces/SYSC4918/src/config.py",
                "parameters": [
                  {
                    "name": "self"
                  }
                ],
                "complexity_score": 3
              },
              {
                "name": "_get_api_key_from_env",
                "signature": "def _get_api_key_from_env(self) -> Optional[str]",
                "docstring": "Get API key from environment variables.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 106,
                "file_path": "/workspaces/SYSC4918/src/config.py",
                "return_type": "Optional[str]",
                "parameters": [
                  {
                    "name": "self"
                  }
                ],
                "complexity_score": 2
              },
              {
                "name": "update",
                "signature": "def update(self, other: Union['Config', Dict[str, Any]]) -> None",
                "docstring": "Update configuration with values from another config or dictionary.",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 122,
                "file_path": "/workspaces/SYSC4918/src/config.py",
                "return_type": "None",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "other",
                    "type": "Union['Config', Dict[str, Any]]"
                  }
                ],
                "complexity_score": 6
              },
              {
                "name": "validate",
                "signature": "def validate(self) -> None",
                "docstring": "Validate configuration settings.",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 137,
                "file_path": "/workspaces/SYSC4918/src/config.py",
                "return_type": "None",
                "parameters": [
                  {
                    "name": "self"
                  }
                ],
                "complexity_score": 7
              },
              {
                "name": "get_cache_path",
                "signature": "def get_cache_path(self) -> Path",
                "docstring": "Get the cache directory path.",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 170,
                "file_path": "/workspaces/SYSC4918/src/config.py",
                "return_type": "Path",
                "parameters": [
                  {
                    "name": "self"
                  }
                ],
                "complexity_score": 1
              },
              {
                "name": "get_model_config",
                "signature": "def get_model_config(self) -> Dict[str, Any]",
                "docstring": "Get model-specific configuration.",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 176,
                "file_path": "/workspaces/SYSC4918/src/config.py",
                "return_type": "Dict[str, Any]",
                "parameters": [
                  {
                    "name": "self"
                  }
                ],
                "complexity_score": 1
              },
              {
                "name": "to_dict",
                "signature": "def to_dict(self) -> Dict[str, Any]",
                "docstring": "Convert configuration to dictionary.",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 189,
                "file_path": "/workspaces/SYSC4918/src/config.py",
                "return_type": "Dict[str, Any]",
                "parameters": [
                  {
                    "name": "self"
                  }
                ],
                "complexity_score": 1
              },
              {
                "name": "from_dict",
                "signature": "def from_dict(cls, data: Dict[str, Any]) -> 'Config'",
                "docstring": "Create configuration from dictionary.",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": true,
                "is_staticmethod": false,
                "decorators": [
                  "@classmethod"
                ],
                "line_number": 194,
                "file_path": "/workspaces/SYSC4918/src/config.py",
                "return_type": "'Config'",
                "parameters": [
                  {
                    "name": "cls"
                  },
                  {
                    "name": "data",
                    "type": "Dict[str, Any]"
                  }
                ],
                "complexity_score": 1
              }
            ],
            "decorators": [
              "@dataclass"
            ],
            "is_abstract": false,
            "is_dataclass": true,
            "is_enum": false,
            "line_number": 20,
            "file_path": "/workspaces/SYSC4918/src/config.py",
            "attributes": [
              {
                "name": "model_name",
                "type": "str"
              },
              {
                "name": "max_tokens",
                "type": "int"
              },
              {
                "name": "api_key",
                "type": "Optional[str]"
              },
              {
                "name": "api_base_url",
                "type": "Optional[str]"
              },
              {
                "name": "include_tests",
                "type": "bool"
              },
              {
                "name": "include_private",
                "type": "bool"
              },
              {
                "name": "include_docs",
                "type": "bool"
              },
              {
                "name": "output_format",
                "type": "str"
              },
              {
                "name": "output_file",
                "type": "str"
              },
              {
                "name": "template_path",
                "type": "Optional[str]"
              },
              {
                "name": "timeout",
                "type": "int"
              },
              {
                "name": "max_file_size",
                "type": "int"
              },
              {
                "name": "cache_enabled",
                "type": "bool"
              },
              {
                "name": "cache_dir",
                "type": "Optional[str]"
              },
              {
                "name": "verbose",
                "type": "bool"
              },
              {
                "name": "quiet",
                "type": "bool"
              },
              {
                "name": "debug",
                "type": "bool"
              },
              {
                "name": "log_file",
                "type": "Optional[str]"
              },
              {
                "name": "token_budget_allocation",
                "type": "Dict[str, float]"
              },
              {
                "name": "priority_weights",
                "type": "Dict[str, float]"
              },
              {
                "name": "model_settings",
                "type": "Dict[str, Any]"
              },
              {
                "name": "ignore_patterns",
                "type": "list"
              }
            ]
          }
        ],
        "functions": [
          {
            "name": "get_default_config_path",
            "signature": "def get_default_config_path() -> Path",
            "docstring": "Get the default configuration file path.",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 203,
            "file_path": "/workspaces/SYSC4918/src/config.py",
            "return_type": "Path",
            "complexity_score": 1
          },
          {
            "name": "load_config",
            "signature": "def load_config(config_path: Optional[Union[str, Path]]=None) -> Config",
            "docstring": "Load configuration from file.\n\nArgs:\n    config_path: Path to configuration file. If None, uses default location.\n    \nReturns:\n    Config object loaded from file\n    \nRaises:\n    FileNotFoundError: I...",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 208,
            "file_path": "/workspaces/SYSC4918/src/config.py",
            "return_type": "Config",
            "parameters": [
              {
                "name": "config_path",
                "type": "Optional[Union[str, Path]]",
                "default": "None"
              }
            ],
            "complexity_score": 5
          },
          {
            "name": "save_config",
            "signature": "def save_config(config: Config, config_path: Optional[Union[str, Path]]=None) -> None",
            "docstring": "Save configuration to file.\n\nArgs:\n    config: Configuration object to save\n    config_path: Path to save configuration file. If None, uses default location.\n    \nRaises:\n    ValueError: If configurat...",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 246,
            "file_path": "/workspaces/SYSC4918/src/config.py",
            "return_type": "None",
            "parameters": [
              {
                "name": "config",
                "type": "Config"
              },
              {
                "name": "config_path",
                "type": "Optional[Union[str, Path]]",
                "default": "None"
              }
            ],
            "complexity_score": 3
          },
          {
            "name": "create_default_config",
            "signature": "def create_default_config() -> Config",
            "docstring": "Create a default configuration object.",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 279,
            "file_path": "/workspaces/SYSC4918/src/config.py",
            "return_type": "Config",
            "complexity_score": 1
          },
          {
            "name": "get_config_template",
            "signature": "def get_config_template() -> Dict[str, Any]",
            "docstring": "Get a configuration template with comments.",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 284,
            "file_path": "/workspaces/SYSC4918/src/config.py",
            "return_type": "Dict[str, Any]",
            "complexity_score": 1
          },
          {
            "name": "merge_configs",
            "signature": "def merge_configs(base_config: Config, override_config: Dict[str, Any]) -> Config",
            "docstring": "Merge two configurations, with override taking precedence.\n\nArgs:\n    base_config: Base configuration object\n    override_config: Dictionary of override values\n    \nReturns:\n    New Config object with...",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 357,
            "file_path": "/workspaces/SYSC4918/src/config.py",
            "return_type": "Config",
            "parameters": [
              {
                "name": "base_config",
                "type": "Config"
              },
              {
                "name": "override_config",
                "type": "Dict[str, Any]"
              }
            ],
            "complexity_score": 5
          },
          {
            "name": "init_config_file",
            "signature": "def init_config_file(config_path: Optional[Union[str, Path]]=None, template: bool=False) -> None",
            "docstring": "Initialize a configuration file with default values.\n\nArgs:\n    config_path: Path to create configuration file\n    template: Whether to create a template with comments",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 381,
            "file_path": "/workspaces/SYSC4918/src/config.py",
            "return_type": "None",
            "parameters": [
              {
                "name": "config_path",
                "type": "Optional[Union[str, Path]]",
                "default": "None"
              },
              {
                "name": "template",
                "type": "bool",
                "default": "False"
              }
            ],
            "complexity_score": 3
          },
          {
            "name": "validate_config_file",
            "signature": "def validate_config_file(config_path: Union[str, Path]) -> bool",
            "docstring": "Validate a configuration file.\n\nArgs:\n    config_path: Path to configuration file\n    \nReturns:\n    True if valid, False otherwise",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 409,
            "file_path": "/workspaces/SYSC4918/src/config.py",
            "return_type": "bool",
            "parameters": [
              {
                "name": "config_path",
                "type": "Union[str, Path]"
              }
            ],
            "complexity_score": 2
          }
        ],
        "imports": [
          "json",
          "os",
          "from pathlib import Path",
          "from typing import Dict",
          "from typing import Any",
          "from typing import Optional",
          "from typing import Union",
          "from dataclasses import dataclass",
          "from dataclasses import asdict",
          "from dataclasses import field",
          "logging"
        ],
        "is_package": false,
        "is_main": false,
        "line_count": 424
      },
      {
        "name": "token_counter",
        "file_path": "/workspaces/SYSC4918/src/utils/token_counter.py",
        "docstring": "Token counting and estimation utilities for managing LLM context windows.\n\nThis module provides functions to count tokens, estimate content size,\nand manage the 1 million token budget for Gemini 2.5 Pro integration.",
        "classes": [
          {
            "name": "ContentType",
            "docstring": "Types of content for token estimation.",
            "inheritance": [
              "Enum"
            ],
            "is_abstract": false,
            "is_dataclass": false,
            "is_enum": true,
            "line_number": 48,
            "file_path": "/workspaces/SYSC4918/src/utils/token_counter.py",
            "attributes": [
              {
                "name": "CODE"
              },
              {
                "name": "DOCSTRING"
              },
              {
                "name": "COMMENT"
              },
              {
                "name": "TEXT"
              },
              {
                "name": "JSON"
              },
              {
                "name": "MARKDOWN"
              }
            ]
          },
          {
            "name": "TokenBudget",
            "docstring": "Token budget allocation for different content types.",
            "methods": [
              {
                "name": "get_used_budget",
                "signature": "def get_used_budget(self) -> int",
                "docstring": "Get total allocated budget.",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 71,
                "file_path": "/workspaces/SYSC4918/src/utils/token_counter.py",
                "return_type": "int",
                "parameters": [
                  {
                    "name": "self"
                  }
                ],
                "complexity_score": 1
              },
              {
                "name": "get_remaining_budget",
                "signature": "def get_remaining_budget(self) -> int",
                "docstring": "Get remaining budget after allocations.",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 76,
                "file_path": "/workspaces/SYSC4918/src/utils/token_counter.py",
                "return_type": "int",
                "parameters": [
                  {
                    "name": "self"
                  }
                ],
                "complexity_score": 1
              }
            ],
            "decorators": [
              "@dataclass"
            ],
            "is_abstract": false,
            "is_dataclass": true,
            "is_enum": false,
            "line_number": 59,
            "file_path": "/workspaces/SYSC4918/src/utils/token_counter.py",
            "attributes": [
              {
                "name": "total_budget",
                "type": "int"
              },
              {
                "name": "metadata",
                "type": "int"
              },
              {
                "name": "dependencies",
                "type": "int"
              },
              {
                "name": "structure",
                "type": "int"
              },
              {
                "name": "api_documentation",
                "type": "int"
              },
              {
                "name": "examples",
                "type": "int"
              },
              {
                "name": "configuration",
                "type": "int"
              },
              {
                "name": "buffer",
                "type": "int"
              }
            ]
          },
          {
            "name": "TokenCounter",
            "docstring": "Advanced token counter with content-aware estimation.",
            "methods": [
              {
                "name": "__init__",
                "signature": "def __init__(self, model_name: str='gemini_2_5_pro')",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 84,
                "file_path": "/workspaces/SYSC4918/src/utils/token_counter.py",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "model_name",
                    "type": "str",
                    "default": "'gemini_2_5_pro'"
                  }
                ],
                "complexity_score": 4
              },
              {
                "name": "count_tokens",
                "signature": "def count_tokens(self, text: str, content_type: ContentType=ContentType.TEXT) -> int",
                "docstring": "Count tokens in text with content-type awareness.\n\nArgs:\n    text: Text to count tokens for\n    content_type: Type of content for better estimation\n    \nReturns:\n    Estimated token count",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 103,
                "file_path": "/workspaces/SYSC4918/src/utils/token_counter.py",
                "return_type": "int",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "text",
                    "type": "str"
                  },
                  {
                    "name": "content_type",
                    "type": "ContentType",
                    "default": "ContentType.TEXT"
                  }
                ],
                "complexity_score": 5
              },
              {
                "name": "_estimate_tokens",
                "signature": "def _estimate_tokens(self, text: str, content_type: ContentType) -> int",
                "docstring": "Estimate tokens using heuristics.\n\nArgs:\n    text: Text to estimate\n    content_type: Type of content\n    \nReturns:\n    Estimated token count",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 136,
                "file_path": "/workspaces/SYSC4918/src/utils/token_counter.py",
                "return_type": "int",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "text",
                    "type": "str"
                  },
                  {
                    "name": "content_type",
                    "type": "ContentType"
                  }
                ],
                "complexity_score": 3
              },
              {
                "name": "count_tokens_in_dict",
                "signature": "def count_tokens_in_dict(self, data: Dict[str, Any], content_type: ContentType=ContentType.JSON) -> int",
                "docstring": "Count tokens in a dictionary/JSON structure.\n\nArgs:\n    data: Dictionary to count tokens for\n    content_type: Type of content\n    \nReturns:\n    Estimated token count",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 175,
                "file_path": "/workspaces/SYSC4918/src/utils/token_counter.py",
                "return_type": "int",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "data",
                    "type": "Dict[str, Any]"
                  },
                  {
                    "name": "content_type",
                    "type": "ContentType",
                    "default": "ContentType.JSON"
                  }
                ],
                "complexity_score": 1
              },
              {
                "name": "get_budget_allocation",
                "signature": "def get_budget_allocation(self, custom_allocation: Optional[Dict[str, float]]=None) -> TokenBudget",
                "docstring": "Get token budget allocation.\n\nArgs:\n    custom_allocation: Custom allocation percentages\n    \nReturns:\n    TokenBudget object with allocations",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 189,
                "file_path": "/workspaces/SYSC4918/src/utils/token_counter.py",
                "return_type": "TokenBudget",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "custom_allocation",
                    "type": "Optional[Dict[str, float]]",
                    "default": "None"
                  }
                ],
                "complexity_score": 2
              }
            ],
            "is_abstract": false,
            "is_dataclass": false,
            "is_enum": false,
            "line_number": 81,
            "file_path": "/workspaces/SYSC4918/src/utils/token_counter.py"
          }
        ],
        "functions": [
          {
            "name": "estimate_tokens",
            "signature": "def estimate_tokens(text: str, content_type: str='text') -> int",
            "docstring": "Simple token estimation function.\n\nArgs:\n    text: Text to estimate tokens for\n    content_type: Type of content (code, text, json, etc.)\n    \nReturns:\n    Estimated token count",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 213,
            "file_path": "/workspaces/SYSC4918/src/utils/token_counter.py",
            "return_type": "int",
            "parameters": [
              {
                "name": "text",
                "type": "str"
              },
              {
                "name": "content_type",
                "type": "str",
                "default": "'text'"
              }
            ],
            "complexity_score": 2
          },
          {
            "name": "count_tokens_in_text",
            "signature": "def count_tokens_in_text(text: str, model_name: str='gemini_2_5_pro') -> int",
            "docstring": "Count tokens in text for a specific model.\n\nArgs:\n    text: Text to count tokens for\n    model_name: Name of the model\n    \nReturns:\n    Token count",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 233,
            "file_path": "/workspaces/SYSC4918/src/utils/token_counter.py",
            "return_type": "int",
            "parameters": [
              {
                "name": "text",
                "type": "str"
              },
              {
                "name": "model_name",
                "type": "str",
                "default": "'gemini_2_5_pro'"
              }
            ],
            "complexity_score": 1
          },
          {
            "name": "get_token_budget_allocation",
            "signature": "def get_token_budget_allocation(model_name: str='gemini_2_5_pro') -> TokenBudget",
            "docstring": "Get default token budget allocation.\n\nArgs:\n    model_name: Name of the model\n    \nReturns:\n    TokenBudget object",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 248,
            "file_path": "/workspaces/SYSC4918/src/utils/token_counter.py",
            "return_type": "TokenBudget",
            "parameters": [
              {
                "name": "model_name",
                "type": "str",
                "default": "'gemini_2_5_pro'"
              }
            ],
            "complexity_score": 1
          },
          {
            "name": "optimize_content_for_tokens",
            "signature": "def optimize_content_for_tokens(content: str, max_tokens: int, content_type: str='text') -> str",
            "docstring": "Optimize content to fit within token limit.\n\nArgs:\n    content: Content to optimize\n    max_tokens: Maximum allowed tokens\n    content_type: Type of content\n    \nReturns:\n    Optimized content",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 262,
            "file_path": "/workspaces/SYSC4918/src/utils/token_counter.py",
            "return_type": "str",
            "parameters": [
              {
                "name": "content",
                "type": "str"
              },
              {
                "name": "max_tokens",
                "type": "int"
              },
              {
                "name": "content_type",
                "type": "str",
                "default": "'text'"
              }
            ],
            "complexity_score": 6
          },
          {
            "name": "analyze_token_distribution",
            "signature": "def analyze_token_distribution(data: Dict[str, Any]) -> Dict[str, int]",
            "docstring": "Analyze token distribution across different data sections.\n\nArgs:\n    data: Data to analyze\n    \nReturns:\n    Dictionary with token counts per section",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 315,
            "file_path": "/workspaces/SYSC4918/src/utils/token_counter.py",
            "return_type": "Dict[str, int]",
            "parameters": [
              {
                "name": "data",
                "type": "Dict[str, Any]"
              }
            ],
            "complexity_score": 4
          },
          {
            "name": "format_token_summary",
            "signature": "def format_token_summary(token_count: int, budget: TokenBudget) -> str",
            "docstring": "Format a human-readable token usage summary.\n\nArgs:\n    token_count: Current token count\n    budget: Token budget\n    \nReturns:\n    Formatted summary string",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 339,
            "file_path": "/workspaces/SYSC4918/src/utils/token_counter.py",
            "return_type": "str",
            "parameters": [
              {
                "name": "token_count",
                "type": "int"
              },
              {
                "name": "budget",
                "type": "TokenBudget"
              }
            ],
            "complexity_score": 1
          }
        ],
        "constants": [
          {
            "name": "TOKEN_RATIOS",
            "value": "{'code': 0.3, 'docstring': 0.25, 'comment': 0.25, 'text': 0.25, 'json': 0.3, 'markdown': 0.25}",
            "type": "dict",
            "line_number": 18
          },
          {
            "name": "MAX_TOKENS",
            "value": "{'gemini_2_5_pro': 1000000, 'gemini_2_5_flash': 1000000, 'gpt_4o': 128000, 'gpt_4o_mini': 128000, 'claude_sonnet': 200000}",
            "type": "dict",
            "line_number": 28
          },
          {
            "name": "DEFAULT_BUDGET_ALLOCATION",
            "value": "{'metadata': 0.005, 'dependencies': 0.01, 'structure': 0.05, 'api_documentation': 0.6, 'examples': 0.2, 'configuration': 0.035, 'buffer': 0.1}",
            "type": "dict",
            "line_number": 37
          }
        ],
        "imports": [
          "re",
          "json",
          "from typing import Dict",
          "from typing import List",
          "from typing import Any",
          "from typing import Optional",
          "from typing import Tuple",
          "from dataclasses import dataclass",
          "from enum import Enum",
          "logging"
        ],
        "is_package": false,
        "is_main": false,
        "line_count": 359
      },
      {
        "name": "__init__",
        "file_path": "/workspaces/SYSC4918/src/utils/__init__.py",
        "docstring": "Utility modules for the README generator project.\n\nThis package contains utility functions for file operations, token counting,\ncontent prioritization, and JSON serialization used throughout the project.",
        "imports": [
          "from file_utils import read_file_safely",
          "from file_utils import find_files_by_pattern",
          "from file_utils import get_project_files",
          "from file_utils import detect_encoding",
          "from file_utils import is_python_file",
          "from file_utils import get_file_size",
          "from file_utils import create_directory",
          "from file_utils import FileReader",
          "from token_counter import TokenCounter",
          "from token_counter import estimate_tokens",
          "from token_counter import count_tokens_in_text",
          "from token_counter import get_token_budget_allocation",
          "from token_counter import optimize_content_for_tokens",
          "from content_prioritizer import ContentPrioritizer",
          "from content_prioritizer import PriorityScore",
          "from content_prioritizer import prioritize_project_data",
          "from content_prioritizer import filter_content_by_priority",
          "from content_prioritizer import compress_content_for_budget",
          "from json_serializer import ProjectDataSerializer",
          "from json_serializer import serialize_project_data",
          "from json_serializer import validate_json_output",
          "from json_serializer import format_json_output",
          "from json_serializer import save_json_to_file"
        ],
        "is_package": true,
        "is_main": false,
        "line_count": 76
      },
      {
        "name": "json_serializer",
        "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py",
        "docstring": "JSON serialization utilities for project data output.\n\nThis module provides functions to serialize project data to JSON format\nwith proper formatting, validation, and error handling.",
        "classes": [
          {
            "name": "ProjectDataEncoder",
            "docstring": "Custom JSON encoder for project data objects.",
            "methods": [
              {
                "name": "default",
                "signature": "def default(self, obj)",
                "docstring": "Handle special object types for JSON serialization.",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 26,
                "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "obj"
                  }
                ],
                "complexity_score": 7
              }
            ],
            "inheritance": [
              "json.JSONEncoder"
            ],
            "is_abstract": false,
            "is_dataclass": false,
            "is_enum": false,
            "line_number": 23,
            "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py"
          },
          {
            "name": "ProjectDataSerializer",
            "docstring": "Advanced project data serializer with validation and optimization.",
            "methods": [
              {
                "name": "__init__",
                "signature": "def __init__(self, token_counter: Optional[TokenCounter]=None)",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 47,
                "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "token_counter",
                    "type": "Optional[TokenCounter]",
                    "default": "None"
                  }
                ],
                "complexity_score": 2
              },
              {
                "name": "serialize",
                "signature": "def serialize(self, project_data: ProjectData, validate: bool=True, optimize_for_tokens: bool=True) -> Dict[str, Any]",
                "docstring": "Serialize project data to dictionary format.\n\nArgs:\n    project_data: Project data to serialize\n    validate: Whether to validate against schema\n    optimize_for_tokens: Whether to optimize for token ...",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 51,
                "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py",
                "return_type": "Dict[str, Any]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_data",
                    "type": "ProjectData"
                  },
                  {
                    "name": "validate",
                    "type": "bool",
                    "default": "True"
                  },
                  {
                    "name": "optimize_for_tokens",
                    "type": "bool",
                    "default": "True"
                  }
                ],
                "complexity_score": 5
              },
              {
                "name": "_convert_to_dict",
                "signature": "def _convert_to_dict(self, project_data: ProjectData) -> Dict[str, Any]",
                "docstring": "Convert project data to dictionary format.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 95,
                "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py",
                "return_type": "Dict[str, Any]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_data",
                    "type": "ProjectData"
                  }
                ],
                "complexity_score": 1
              },
              {
                "name": "_serialize_metadata",
                "signature": "def _serialize_metadata(self, metadata) -> Dict[str, Any]",
                "docstring": "Serialize metadata with proper type handling.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 109,
                "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py",
                "return_type": "Dict[str, Any]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "metadata"
                  }
                ],
                "complexity_score": 1
              },
              {
                "name": "_serialize_dependencies",
                "signature": "def _serialize_dependencies(self, dependencies) -> Dict[str, Any]",
                "docstring": "Serialize dependencies information.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 126,
                "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py",
                "return_type": "Dict[str, Any]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "dependencies"
                  }
                ],
                "complexity_score": 1
              },
              {
                "name": "_serialize_structure",
                "signature": "def _serialize_structure(self, structure) -> Dict[str, Any]",
                "docstring": "Serialize project structure information.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 136,
                "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py",
                "return_type": "Dict[str, Any]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "structure"
                  }
                ],
                "complexity_score": 1
              },
              {
                "name": "_serialize_module",
                "signature": "def _serialize_module(self, module) -> Dict[str, Any]",
                "docstring": "Serialize module information.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 153,
                "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py",
                "return_type": "Dict[str, Any]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "module"
                  }
                ],
                "complexity_score": 1
              },
              {
                "name": "_serialize_class",
                "signature": "def _serialize_class(self, class_info) -> Dict[str, Any]",
                "docstring": "Serialize class information.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 168,
                "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py",
                "return_type": "Dict[str, Any]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "class_info"
                  }
                ],
                "complexity_score": 1
              },
              {
                "name": "_serialize_function",
                "signature": "def _serialize_function(self, function) -> Dict[str, Any]",
                "docstring": "Serialize function information.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 185,
                "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py",
                "return_type": "Dict[str, Any]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "function"
                  }
                ],
                "complexity_score": 1
              },
              {
                "name": "_serialize_entry_point",
                "signature": "def _serialize_entry_point(self, entry_point) -> Dict[str, Any]",
                "docstring": "Serialize entry point information.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 204,
                "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py",
                "return_type": "Dict[str, Any]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "entry_point"
                  }
                ],
                "complexity_score": 1
              },
              {
                "name": "_serialize_configuration",
                "signature": "def _serialize_configuration(self, config) -> Dict[str, Any]",
                "docstring": "Serialize configuration information.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 214,
                "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py",
                "return_type": "Dict[str, Any]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "config"
                  }
                ],
                "complexity_score": 2
              },
              {
                "name": "_serialize_examples",
                "signature": "def _serialize_examples(self, examples) -> List[Dict[str, Any]]",
                "docstring": "Serialize examples list.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 226,
                "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py",
                "return_type": "List[Dict[str, Any]]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "examples"
                  }
                ],
                "complexity_score": 1
              },
              {
                "name": "_serialize_example",
                "signature": "def _serialize_example(self, example) -> Dict[str, Any]",
                "docstring": "Serialize a single example.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 230,
                "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py",
                "return_type": "Dict[str, Any]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "example"
                  }
                ],
                "complexity_score": 1
              },
              {
                "name": "_serialize_tests",
                "signature": "def _serialize_tests(self, tests) -> Optional[Dict[str, Any]]",
                "docstring": "Serialize test information.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 244,
                "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py",
                "return_type": "Optional[Dict[str, Any]]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "tests"
                  }
                ],
                "complexity_score": 2
              },
              {
                "name": "_serialize_documentation",
                "signature": "def _serialize_documentation(self, documentation) -> Optional[Dict[str, Any]]",
                "docstring": "Serialize documentation information.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 257,
                "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py",
                "return_type": "Optional[Dict[str, Any]]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "documentation"
                  }
                ],
                "complexity_score": 2
              },
              {
                "name": "_optimize_for_tokens",
                "signature": "def _optimize_for_tokens(self, data_dict: Dict[str, Any]) -> Dict[str, Any]",
                "docstring": "Optimize data dictionary for token usage.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 272,
                "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py",
                "return_type": "Dict[str, Any]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "data_dict",
                    "type": "Dict[str, Any]"
                  }
                ],
                "complexity_score": 1
              },
              {
                "name": "_remove_empty_values",
                "signature": "def _remove_empty_values(self, data: Any) -> Any",
                "docstring": "Recursively remove empty values from data structure.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 285,
                "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py",
                "return_type": "Any",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "data",
                    "type": "Any"
                  }
                ],
                "complexity_score": 5
              },
              {
                "name": "_truncate_long_content",
                "signature": "def _truncate_long_content(self, data_dict: Dict[str, Any]) -> Dict[str, Any]",
                "docstring": "Truncate long content to optimize token usage.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 295,
                "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py",
                "return_type": "Dict[str, Any]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "data_dict",
                    "type": "Dict[str, Any]"
                  }
                ],
                "complexity_score": 15
              },
              {
                "name": "_truncate_text",
                "signature": "def _truncate_text(self, text: str, max_length: int) -> str",
                "docstring": "Truncate text to maximum length.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 321,
                "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py",
                "return_type": "str",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "text",
                    "type": "str"
                  },
                  {
                    "name": "max_length",
                    "type": "int"
                  }
                ],
                "complexity_score": 2
              },
              {
                "name": "_prioritize_content",
                "signature": "def _prioritize_content(self, data_dict: Dict[str, Any]) -> Dict[str, Any]",
                "docstring": "Prioritize content based on importance.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 327,
                "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py",
                "return_type": "Dict[str, Any]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "data_dict",
                    "type": "Dict[str, Any]"
                  }
                ],
                "complexity_score": 6
              },
              {
                "name": "_calculate_total_tokens",
                "signature": "def _calculate_total_tokens(self, data_dict: Dict[str, Any]) -> int",
                "docstring": "Calculate total token count for the serialized data.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 344,
                "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py",
                "return_type": "int",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "data_dict",
                    "type": "Dict[str, Any]"
                  }
                ],
                "complexity_score": 1
              }
            ],
            "is_abstract": false,
            "is_dataclass": false,
            "is_enum": false,
            "line_number": 44,
            "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py"
          }
        ],
        "functions": [
          {
            "name": "serialize_project_data",
            "signature": "def serialize_project_data(project_data: ProjectData, validate: bool=True, optimize_for_tokens: bool=True) -> Dict[str, Any]",
            "docstring": "Serialize project data to dictionary format.\n\nArgs:\n    project_data: Project data to serialize\n    validate: Whether to validate against schema\n    optimize_for_tokens: Whether to optimize for token ...",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 350,
            "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py",
            "return_type": "Dict[str, Any]",
            "parameters": [
              {
                "name": "project_data",
                "type": "ProjectData"
              },
              {
                "name": "validate",
                "type": "bool",
                "default": "True"
              },
              {
                "name": "optimize_for_tokens",
                "type": "bool",
                "default": "True"
              }
            ],
            "complexity_score": 1
          },
          {
            "name": "validate_json_output",
            "signature": "def validate_json_output(data: Dict[str, Any]) -> Dict[str, Any]",
            "docstring": "Validate JSON output against schema.\n\nArgs:\n    data: Data to validate\n    \nReturns:\n    Validation result dictionary",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 368,
            "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py",
            "return_type": "Dict[str, Any]",
            "parameters": [
              {
                "name": "data",
                "type": "Dict[str, Any]"
              }
            ],
            "complexity_score": 1
          },
          {
            "name": "format_json_output",
            "signature": "def format_json_output(data: Dict[str, Any], indent: int=2) -> str",
            "docstring": "Format data as JSON string with proper indentation.\n\nArgs:\n    data: Data to format\n    indent: Number of spaces for indentation\n    \nReturns:\n    Formatted JSON string",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 381,
            "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py",
            "return_type": "str",
            "parameters": [
              {
                "name": "data",
                "type": "Dict[str, Any]"
              },
              {
                "name": "indent",
                "type": "int",
                "default": "2"
              }
            ],
            "complexity_score": 1
          },
          {
            "name": "save_json_to_file",
            "signature": "def save_json_to_file(data: Dict[str, Any], file_path: str, indent: int=2, validate: bool=True) -> bool",
            "docstring": "Save data to JSON file.\n\nArgs:\n    data: Data to save\n    file_path: Path to save file\n    indent: JSON indentation\n    validate: Whether to validate before saving\n    \nReturns:\n    True if successful...",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 395,
            "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py",
            "return_type": "bool",
            "parameters": [
              {
                "name": "data",
                "type": "Dict[str, Any]"
              },
              {
                "name": "file_path",
                "type": "str"
              },
              {
                "name": "indent",
                "type": "int",
                "default": "2"
              },
              {
                "name": "validate",
                "type": "bool",
                "default": "True"
              }
            ],
            "complexity_score": 4
          },
          {
            "name": "load_json_from_file",
            "signature": "def load_json_from_file(file_path: str) -> Optional[Dict[str, Any]]",
            "docstring": "Load JSON data from file.\n\nArgs:\n    file_path: Path to JSON file\n    \nReturns:\n    Loaded data or None if error",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 431,
            "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py",
            "return_type": "Optional[Dict[str, Any]]",
            "parameters": [
              {
                "name": "file_path",
                "type": "str"
              }
            ],
            "complexity_score": 2
          },
          {
            "name": "get_json_size_info",
            "signature": "def get_json_size_info(data: Dict[str, Any]) -> Dict[str, Any]",
            "docstring": "Get size information for JSON data.\n\nArgs:\n    data: Data to analyze\n    \nReturns:\n    Size information dictionary",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 449,
            "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py",
            "return_type": "Dict[str, Any]",
            "parameters": [
              {
                "name": "data",
                "type": "Dict[str, Any]"
              }
            ],
            "complexity_score": 1
          }
        ],
        "imports": [
          "json",
          "datetime",
          "from typing import Dict",
          "from typing import Any",
          "from typing import Optional",
          "from typing import List",
          "from typing import Union",
          "from pathlib import Path",
          "from dataclasses import asdict",
          "from dataclasses import is_dataclass",
          "from enum import Enum",
          "logging",
          "from models.project_data import ProjectData",
          "from models.project_data import ProjectType",
          "from models.project_data import LicenseType",
          "from models.schemas import validate_project_data",
          "from models.schemas import PROJECT_DATA_SCHEMA",
          "from token_counter import TokenCounter",
          "from token_counter import ContentType"
        ],
        "is_package": false,
        "is_main": false,
        "line_count": 469
      },
      {
        "name": "file_utils",
        "file_path": "/workspaces/SYSC4918/src/utils/file_utils.py",
        "docstring": "File system utilities for safe and efficient file operations.\n\nThis module provides functions for reading files, detecting encodings,\ntraversing directories, and handling various file types commonly found\nin Python projects.",
        "classes": [
          {
            "name": "FileInfo",
            "docstring": "Information about a file.",
            "decorators": [
              "@dataclass"
            ],
            "is_abstract": false,
            "is_dataclass": true,
            "is_enum": false,
            "line_number": 52,
            "file_path": "/workspaces/SYSC4918/src/utils/file_utils.py",
            "attributes": [
              {
                "name": "path",
                "type": "str"
              },
              {
                "name": "size",
                "type": "int"
              },
              {
                "name": "encoding",
                "type": "Optional[str]"
              },
              {
                "name": "mime_type",
                "type": "Optional[str]"
              },
              {
                "name": "is_text",
                "type": "bool"
              },
              {
                "name": "is_python",
                "type": "bool"
              },
              {
                "name": "is_config",
                "type": "bool"
              }
            ]
          },
          {
            "name": "FileReader",
            "docstring": "Enhanced file reader with encoding detection and error handling.",
            "methods": [
              {
                "name": "__init__",
                "signature": "def __init__(self, max_file_size: int=10 * 1024 * 1024)",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 66,
                "file_path": "/workspaces/SYSC4918/src/utils/file_utils.py",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "max_file_size",
                    "type": "int",
                    "default": "10 * 1024 * 1024"
                  }
                ],
                "complexity_score": 1
              },
              {
                "name": "read_file",
                "signature": "def read_file(self, file_path: str) -> Optional[str]",
                "docstring": "Read a file with automatic encoding detection.\n\nArgs:\n    file_path: Path to the file to read\n    \nReturns:\n    File content as string, or None if reading fails",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 70,
                "file_path": "/workspaces/SYSC4918/src/utils/file_utils.py",
                "return_type": "Optional[str]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "file_path",
                    "type": "str"
                  }
                ],
                "complexity_score": 6
              },
              {
                "name": "detect_encoding",
                "signature": "def detect_encoding(self, file_path: str) -> Optional[str]",
                "docstring": "Detect file encoding using chardet.\n\nArgs:\n    file_path: Path to the file\n    \nReturns:\n    Detected encoding or None",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 102,
                "file_path": "/workspaces/SYSC4918/src/utils/file_utils.py",
                "return_type": "Optional[str]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "file_path",
                    "type": "str"
                  }
                ],
                "complexity_score": 8
              }
            ],
            "is_abstract": false,
            "is_dataclass": false,
            "is_enum": false,
            "line_number": 63,
            "file_path": "/workspaces/SYSC4918/src/utils/file_utils.py"
          }
        ],
        "functions": [
          {
            "name": "read_file_safely",
            "signature": "def read_file_safely(file_path: str, max_size: int=10 * 1024 * 1024) -> Optional[str]",
            "docstring": "Safely read a file with encoding detection and size limits.\n\nArgs:\n    file_path: Path to the file\n    max_size: Maximum file size in bytes\n    \nReturns:\n    File content or None if reading fails",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 145,
            "file_path": "/workspaces/SYSC4918/src/utils/file_utils.py",
            "return_type": "Optional[str]",
            "parameters": [
              {
                "name": "file_path",
                "type": "str"
              },
              {
                "name": "max_size",
                "type": "int",
                "default": "10 * 1024 * 1024"
              }
            ],
            "complexity_score": 1
          },
          {
            "name": "detect_encoding",
            "signature": "def detect_encoding(file_path: str) -> Optional[str]",
            "docstring": "Detect file encoding.\n\nArgs:\n    file_path: Path to the file\n    \nReturns:\n    Detected encoding or None",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 160,
            "file_path": "/workspaces/SYSC4918/src/utils/file_utils.py",
            "return_type": "Optional[str]",
            "parameters": [
              {
                "name": "file_path",
                "type": "str"
              }
            ],
            "complexity_score": 1
          },
          {
            "name": "is_python_file",
            "signature": "def is_python_file(file_path: str) -> bool",
            "docstring": "Check if a file is a Python file.\n\nArgs:\n    file_path: Path to the file\n    \nReturns:\n    True if the file is a Python file",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 174,
            "file_path": "/workspaces/SYSC4918/src/utils/file_utils.py",
            "return_type": "bool",
            "parameters": [
              {
                "name": "file_path",
                "type": "str"
              }
            ],
            "complexity_score": 6
          },
          {
            "name": "is_text_file",
            "signature": "def is_text_file(file_path: str) -> bool",
            "docstring": "Check if a file is a text file.\n\nArgs:\n    file_path: Path to the file\n    \nReturns:\n    True if the file is likely a text file",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 203,
            "file_path": "/workspaces/SYSC4918/src/utils/file_utils.py",
            "return_type": "bool",
            "parameters": [
              {
                "name": "file_path",
                "type": "str"
              }
            ],
            "complexity_score": 3
          },
          {
            "name": "should_ignore_file",
            "signature": "def should_ignore_file(file_path: str, ignore_patterns: Optional[Set[str]]=None) -> bool",
            "docstring": "Check if a file should be ignored based on patterns.\n\nArgs:\n    file_path: Path to the file\n    ignore_patterns: Custom ignore patterns to use\n    \nReturns:\n    True if the file should be ignored",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 227,
            "file_path": "/workspaces/SYSC4918/src/utils/file_utils.py",
            "return_type": "bool",
            "parameters": [
              {
                "name": "file_path",
                "type": "str"
              },
              {
                "name": "ignore_patterns",
                "type": "Optional[Set[str]]",
                "default": "None"
              }
            ],
            "complexity_score": 7
          },
          {
            "name": "find_files_by_pattern",
            "signature": "def find_files_by_pattern(directory: str, pattern: str, recursive: bool=True) -> List[str]",
            "docstring": "Find files matching a pattern in a directory.\n\nArgs:\n    directory: Directory to search\n    pattern: File pattern to match\n    recursive: Whether to search recursively\n    \nReturns:\n    List of matchi...",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 259,
            "file_path": "/workspaces/SYSC4918/src/utils/file_utils.py",
            "return_type": "List[str]",
            "parameters": [
              {
                "name": "directory",
                "type": "str"
              },
              {
                "name": "pattern",
                "type": "str"
              },
              {
                "name": "recursive",
                "type": "bool",
                "default": "True"
              }
            ],
            "complexity_score": 6
          },
          {
            "name": "get_project_files",
            "signature": "def get_project_files(project_path: str, include_tests: bool=False) -> Dict[str, List[FileInfo]]",
            "docstring": "Get categorized files from a project directory.\n\nArgs:\n    project_path: Path to the project root\n    include_tests: Whether to include test files\n    \nReturns:\n    Dictionary of categorized file info...",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 291,
            "file_path": "/workspaces/SYSC4918/src/utils/file_utils.py",
            "return_type": "Dict[str, List[FileInfo]]",
            "parameters": [
              {
                "name": "project_path",
                "type": "str"
              },
              {
                "name": "include_tests",
                "type": "bool",
                "default": "False"
              }
            ],
            "complexity_score": 13
          },
          {
            "name": "get_file_size",
            "signature": "def get_file_size(file_path: str) -> int",
            "docstring": "Get file size in bytes.\n\nArgs:\n    file_path: Path to the file\n    \nReturns:\n    File size in bytes, or 0 if error",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 384,
            "file_path": "/workspaces/SYSC4918/src/utils/file_utils.py",
            "return_type": "int",
            "parameters": [
              {
                "name": "file_path",
                "type": "str"
              }
            ],
            "complexity_score": 2
          },
          {
            "name": "create_directory",
            "signature": "def create_directory(directory_path: str) -> bool",
            "docstring": "Create a directory if it doesn't exist.\n\nArgs:\n    directory_path: Path to the directory\n    \nReturns:\n    True if directory was created or already exists",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 400,
            "file_path": "/workspaces/SYSC4918/src/utils/file_utils.py",
            "return_type": "bool",
            "parameters": [
              {
                "name": "directory_path",
                "type": "str"
              }
            ],
            "complexity_score": 2
          },
          {
            "name": "get_relative_path",
            "signature": "def get_relative_path(file_path: str, base_path: str) -> str",
            "docstring": "Get relative path from base path.\n\nArgs:\n    file_path: Full path to file\n    base_path: Base path to calculate relative from\n    \nReturns:\n    Relative path",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 418,
            "file_path": "/workspaces/SYSC4918/src/utils/file_utils.py",
            "return_type": "str",
            "parameters": [
              {
                "name": "file_path",
                "type": "str"
              },
              {
                "name": "base_path",
                "type": "str"
              }
            ],
            "complexity_score": 2
          }
        ],
        "constants": [
          {
            "name": "IGNORE_PATTERNS",
            "value": "{'.git', '.svn', '.hg', '.bzr', '__pycache__', '*.pyc', '*.pyo', '*.pyd', 'venv', 'env', '.venv', '.env', 'virtualenv', '.vscode', '.idea', '*.swp', '*.swo', 'build', 'dist', '*.egg-info', '.tox', '.DS_Store', 'Thumbs.db', '*.tmp', '*.temp', '*.log'}",
            "type": "set",
            "line_number": 21
          },
          {
            "name": "PYTHON_EXTENSIONS",
            "value": "{'.py', '.pyw', '.pyx', '.pyi'}",
            "type": "set",
            "line_number": 39
          },
          {
            "name": "CONFIG_FILES",
            "value": "{'setup.py', 'setup.cfg', 'pyproject.toml', 'requirements.txt', 'requirements-dev.txt', 'Pipfile', 'Pipfile.lock', 'poetry.lock', 'tox.ini', 'pytest.ini', '.flake8', '.pylintrc', 'mypy.ini', '.gitignore', '.gitattributes', 'MANIFEST.in', 'LICENSE', 'README.md', 'README.rst', 'README.txt', 'CHANGELOG.md', 'CHANGELOG.rst'}",
            "type": "set",
            "line_number": 42
          }
        ],
        "imports": [
          "os",
          "re",
          "chardet",
          "mimetypes",
          "from pathlib import Path",
          "from typing import List",
          "from typing import Optional",
          "from typing import Dict",
          "from typing import Generator",
          "from typing import Set",
          "from typing import Tuple",
          "from dataclasses import dataclass",
          "logging"
        ],
        "is_package": false,
        "is_main": false,
        "line_count": 432
      },
      {
        "name": "content_prioritizer",
        "file_path": "/workspaces/SYSC4918/src/utils/content_prioritizer.py",
        "docstring": "Content prioritization logic for managing token budgets and ensuring\nthe most important information is included in README generation.\n\nThis module implements sophisticated algorithms to prioritize, filter,\nand compress content based on importance scores and token constraints.",
        "classes": [
          {
            "name": "PriorityLevel",
            "docstring": "Priority levels for content.",
            "inheritance": [
              "Enum"
            ],
            "is_abstract": false,
            "is_dataclass": false,
            "is_enum": true,
            "line_number": 21,
            "file_path": "/workspaces/SYSC4918/src/utils/content_prioritizer.py",
            "attributes": [
              {
                "name": "CRITICAL"
              },
              {
                "name": "HIGH"
              },
              {
                "name": "MEDIUM"
              },
              {
                "name": "LOW"
              },
              {
                "name": "MINIMAL"
              }
            ]
          },
          {
            "name": "PriorityScore",
            "docstring": "Represents a priority score for a piece of content.",
            "methods": [
              {
                "name": "__post_init__",
                "signature": "def __post_init__(self)",
                "docstring": "Calculate efficiency score (priority per token).",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 41,
                "file_path": "/workspaces/SYSC4918/src/utils/content_prioritizer.py",
                "parameters": [
                  {
                    "name": "self"
                  }
                ],
                "complexity_score": 1
              }
            ],
            "decorators": [
              "@dataclass"
            ],
            "is_abstract": false,
            "is_dataclass": true,
            "is_enum": false,
            "line_number": 31,
            "file_path": "/workspaces/SYSC4918/src/utils/content_prioritizer.py",
            "attributes": [
              {
                "name": "item_id",
                "type": "str"
              },
              {
                "name": "item_type",
                "type": "str"
              },
              {
                "name": "score",
                "type": "float"
              },
              {
                "name": "token_count",
                "type": "int"
              },
              {
                "name": "efficiency",
                "type": "float"
              },
              {
                "name": "reasons",
                "type": "List[str]"
              }
            ]
          },
          {
            "name": "ContentPrioritizer",
            "docstring": "Advanced content prioritization system.",
            "methods": [
              {
                "name": "__init__",
                "signature": "def __init__(self, token_counter: Optional[TokenCounter]=None)",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 49,
                "file_path": "/workspaces/SYSC4918/src/utils/content_prioritizer.py",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "token_counter",
                    "type": "Optional[TokenCounter]",
                    "default": "None"
                  }
                ],
                "complexity_score": 2
              },
              {
                "name": "calculate_priority_scores",
                "signature": "def calculate_priority_scores(self, project_data: ProjectData) -> List[PriorityScore]",
                "docstring": "Calculate priority scores for all content in project data.\n\nArgs:\n    project_data: Project data to prioritize\n    \nReturns:\n    List of priority scores sorted by importance",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 88,
                "file_path": "/workspaces/SYSC4918/src/utils/content_prioritizer.py",
                "return_type": "List[PriorityScore]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_data",
                    "type": "ProjectData"
                  }
                ],
                "complexity_score": 4
              },
              {
                "name": "_score_module",
                "signature": "def _score_module(self, module: ModuleInfo) -> List[PriorityScore]",
                "docstring": "Score all content in a module.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 120,
                "file_path": "/workspaces/SYSC4918/src/utils/content_prioritizer.py",
                "return_type": "List[PriorityScore]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "module",
                    "type": "ModuleInfo"
                  }
                ],
                "complexity_score": 4
              },
              {
                "name": "_score_class",
                "signature": "def _score_class(self, class_info: ClassInfo, module: ModuleInfo) -> PriorityScore",
                "docstring": "Calculate priority score for a class.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 141,
                "file_path": "/workspaces/SYSC4918/src/utils/content_prioritizer.py",
                "return_type": "PriorityScore",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "class_info",
                    "type": "ClassInfo"
                  },
                  {
                    "name": "module",
                    "type": "ModuleInfo"
                  }
                ],
                "complexity_score": 12
              },
              {
                "name": "_score_method",
                "signature": "def _score_method(self, method: FunctionInfo, class_info: ClassInfo, module: ModuleInfo) -> PriorityScore",
                "docstring": "Calculate priority score for a method.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 194,
                "file_path": "/workspaces/SYSC4918/src/utils/content_prioritizer.py",
                "return_type": "PriorityScore",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "method",
                    "type": "FunctionInfo"
                  },
                  {
                    "name": "class_info",
                    "type": "ClassInfo"
                  },
                  {
                    "name": "module",
                    "type": "ModuleInfo"
                  }
                ],
                "complexity_score": 12
              },
              {
                "name": "_score_function",
                "signature": "def _score_function(self, function: FunctionInfo, module: ModuleInfo) -> PriorityScore",
                "docstring": "Calculate priority score for a function.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 247,
                "file_path": "/workspaces/SYSC4918/src/utils/content_prioritizer.py",
                "return_type": "PriorityScore",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "function",
                    "type": "FunctionInfo"
                  },
                  {
                    "name": "module",
                    "type": "ModuleInfo"
                  }
                ],
                "complexity_score": 10
              },
              {
                "name": "_score_example",
                "signature": "def _score_example(self, example: Any, index: int) -> PriorityScore",
                "docstring": "Calculate priority score for an example.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 295,
                "file_path": "/workspaces/SYSC4918/src/utils/content_prioritizer.py",
                "return_type": "PriorityScore",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "example",
                    "type": "Any"
                  },
                  {
                    "name": "index",
                    "type": "int"
                  }
                ],
                "complexity_score": 5
              },
              {
                "name": "_score_configuration",
                "signature": "def _score_configuration(self, config: Any) -> PriorityScore",
                "docstring": "Calculate priority score for configuration.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 326,
                "file_path": "/workspaces/SYSC4918/src/utils/content_prioritizer.py",
                "return_type": "PriorityScore",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "config",
                    "type": "Any"
                  }
                ],
                "complexity_score": 1
              },
              {
                "name": "_detect_framework",
                "signature": "def _detect_framework(self, text: str) -> Optional[str]",
                "docstring": "Detect framework usage in text.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 344,
                "file_path": "/workspaces/SYSC4918/src/utils/content_prioritizer.py",
                "return_type": "Optional[str]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "text",
                    "type": "str"
                  }
                ],
                "complexity_score": 3
              },
              {
                "name": "filter_by_budget",
                "signature": "def filter_by_budget(self, priority_scores: List[PriorityScore], budget: TokenBudget) -> List[PriorityScore]",
                "docstring": "Filter content to fit within token budget.\n\nArgs:\n    priority_scores: List of priority scores\n    budget: Token budget constraints\n    \nReturns:\n    Filtered list that fits within budget",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 354,
                "file_path": "/workspaces/SYSC4918/src/utils/content_prioritizer.py",
                "return_type": "List[PriorityScore]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "priority_scores",
                    "type": "List[PriorityScore]"
                  },
                  {
                    "name": "budget",
                    "type": "TokenBudget"
                  }
                ],
                "complexity_score": 4
              },
              {
                "name": "_select_by_budget",
                "signature": "def _select_by_budget(self, scores: List[PriorityScore], budget: int) -> List[PriorityScore]",
                "docstring": "Select items that fit within a specific budget.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 390,
                "file_path": "/workspaces/SYSC4918/src/utils/content_prioritizer.py",
                "return_type": "List[PriorityScore]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "scores",
                    "type": "List[PriorityScore]"
                  },
                  {
                    "name": "budget",
                    "type": "int"
                  }
                ],
                "complexity_score": 3
              },
              {
                "name": "compress_content",
                "signature": "def compress_content(self, content: str, max_tokens: int, content_type: ContentType) -> str",
                "docstring": "Compress content to fit within token limit.\n\nArgs:\n    content: Content to compress\n    max_tokens: Maximum token limit\n    content_type: Type of content\n    \nReturns:\n    Compressed content",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 406,
                "file_path": "/workspaces/SYSC4918/src/utils/content_prioritizer.py",
                "return_type": "str",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "content",
                    "type": "str"
                  },
                  {
                    "name": "max_tokens",
                    "type": "int"
                  },
                  {
                    "name": "content_type",
                    "type": "ContentType"
                  }
                ],
                "complexity_score": 4
              },
              {
                "name": "_compress_code",
                "signature": "def _compress_code(self, code: str, max_tokens: int) -> str",
                "docstring": "Compress code content.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 431,
                "file_path": "/workspaces/SYSC4918/src/utils/content_prioritizer.py",
                "return_type": "str",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "code",
                    "type": "str"
                  },
                  {
                    "name": "max_tokens",
                    "type": "int"
                  }
                ],
                "complexity_score": 6
              },
              {
                "name": "_compress_docstring",
                "signature": "def _compress_docstring(self, docstring: str, max_tokens: int) -> str",
                "docstring": "Compress docstring content.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 455,
                "file_path": "/workspaces/SYSC4918/src/utils/content_prioritizer.py",
                "return_type": "str",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "docstring",
                    "type": "str"
                  },
                  {
                    "name": "max_tokens",
                    "type": "int"
                  }
                ],
                "complexity_score": 3
              },
              {
                "name": "_compress_text",
                "signature": "def _compress_text(self, text: str, max_tokens: int) -> str",
                "docstring": "Compress general text content.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 472,
                "file_path": "/workspaces/SYSC4918/src/utils/content_prioritizer.py",
                "return_type": "str",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "text",
                    "type": "str"
                  },
                  {
                    "name": "max_tokens",
                    "type": "int"
                  }
                ],
                "complexity_score": 3
              }
            ],
            "is_abstract": false,
            "is_dataclass": false,
            "is_enum": false,
            "line_number": 46,
            "file_path": "/workspaces/SYSC4918/src/utils/content_prioritizer.py"
          }
        ],
        "functions": [
          {
            "name": "prioritize_project_data",
            "signature": "def prioritize_project_data(project_data: ProjectData, token_budget: TokenBudget) -> List[PriorityScore]",
            "docstring": "Prioritize project data content based on importance and token budget.\n\nArgs:\n    project_data: Project data to prioritize\n    token_budget: Token budget constraints\n    \nReturns:\n    List of prioritiz...",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 488,
            "file_path": "/workspaces/SYSC4918/src/utils/content_prioritizer.py",
            "return_type": "List[PriorityScore]",
            "parameters": [
              {
                "name": "project_data",
                "type": "ProjectData"
              },
              {
                "name": "token_budget",
                "type": "TokenBudget"
              }
            ],
            "complexity_score": 1
          },
          {
            "name": "filter_content_by_priority",
            "signature": "def filter_content_by_priority(content_items: List[Any], min_priority: float) -> List[Any]",
            "docstring": "Filter content items by minimum priority score.\n\nArgs:\n    content_items: List of content items with priority scores\n    min_priority: Minimum priority threshold\n    \nReturns:\n    Filtered list of con...",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 504,
            "file_path": "/workspaces/SYSC4918/src/utils/content_prioritizer.py",
            "return_type": "List[Any]",
            "parameters": [
              {
                "name": "content_items",
                "type": "List[Any]"
              },
              {
                "name": "min_priority",
                "type": "float"
              }
            ],
            "complexity_score": 2
          },
          {
            "name": "compress_content_for_budget",
            "signature": "def compress_content_for_budget(content: Dict[str, Any], token_budget: TokenBudget) -> Dict[str, Any]",
            "docstring": "Compress content to fit within token budget.\n\nArgs:\n    content: Content dictionary to compress\n    token_budget: Token budget constraints\n    \nReturns:\n    Compressed content dictionary",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 518,
            "file_path": "/workspaces/SYSC4918/src/utils/content_prioritizer.py",
            "return_type": "Dict[str, Any]",
            "parameters": [
              {
                "name": "content",
                "type": "Dict[str, Any]"
              },
              {
                "name": "token_budget",
                "type": "TokenBudget"
              }
            ],
            "complexity_score": 7
          }
        ],
        "imports": [
          "re",
          "from typing import Dict",
          "from typing import List",
          "from typing import Any",
          "from typing import Optional",
          "from typing import Tuple",
          "from typing import Set",
          "from dataclasses import dataclass",
          "from dataclasses import field",
          "from enum import Enum",
          "logging",
          "from models.project_data import ProjectData",
          "from models.project_data import ClassInfo",
          "from models.project_data import FunctionInfo",
          "from models.project_data import ModuleInfo",
          "from token_counter import TokenCounter",
          "from token_counter import ContentType",
          "from token_counter import TokenBudget"
        ],
        "is_package": false,
        "is_main": false,
        "line_count": 551
      },
      {
        "name": "__init__",
        "file_path": "/workspaces/SYSC4918/src/parser/__init__.py",
        "docstring": "Parser module for the README generator project.\n\nThis module contains the main orchestrator and all sub-parsers responsible\nfor extracting information from Python projects for README generation.",
        "imports": [
          "from project_parser import ProjectParser",
          "from project_parser import ParseResult",
          "from project_parser import ParsingError",
          "from project_parser import parse_project",
          "from project_parser import parse_project_to_json",
          "from metadata_parser import MetadataParser",
          "from metadata_parser import extract_project_metadata",
          "from metadata_parser import detect_project_type",
          "from metadata_parser import find_license_info",
          "from dependency_parser import DependencyParser",
          "from dependency_parser import extract_dependencies",
          "from dependency_parser import parse_requirements_file",
          "from dependency_parser import detect_python_version",
          "from code_parser import CodeParser",
          "from code_parser import extract_code_information",
          "from code_parser import parse_python_file",
          "from code_parser import analyze_ast_node",
          "from structure_parser import StructureParser",
          "from structure_parser import analyze_project_structure",
          "from structure_parser import find_entry_points",
          "from structure_parser import categorize_directories",
          "from example_parser import ExampleParser",
          "from example_parser import extract_code_examples",
          "from example_parser import parse_docstring_examples",
          "from example_parser import find_usage_patterns"
        ],
        "is_package": true,
        "is_main": false,
        "line_count": 90
      },
      {
        "name": "project_parser",
        "file_path": "/workspaces/SYSC4918/src/parser/project_parser.py",
        "docstring": "Main project parser orchestrator that coordinates all parsing activities.\n\nThis module provides the primary interface for parsing Python projects,\nmanaging the parsing workflow, and consolidating results from all sub-parsers.",
        "classes": [
          {
            "name": "ParsingError",
            "docstring": "Custom exception for parsing errors.",
            "methods": [
              {
                "name": "__init__",
                "signature": "def __init__(self, message: str, parser_name: str=None, file_path: str=None)",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 38,
                "file_path": "/workspaces/SYSC4918/src/parser/project_parser.py",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "message",
                    "type": "str"
                  },
                  {
                    "name": "parser_name",
                    "type": "str",
                    "default": "None"
                  },
                  {
                    "name": "file_path",
                    "type": "str",
                    "default": "None"
                  }
                ],
                "complexity_score": 1
              }
            ],
            "inheritance": [
              "Exception"
            ],
            "is_abstract": false,
            "is_dataclass": false,
            "is_enum": false,
            "line_number": 35,
            "file_path": "/workspaces/SYSC4918/src/parser/project_parser.py"
          },
          {
            "name": "ParseResult",
            "docstring": "Result of project parsing operation.",
            "decorators": [
              "@dataclass"
            ],
            "is_abstract": false,
            "is_dataclass": true,
            "is_enum": false,
            "line_number": 46,
            "file_path": "/workspaces/SYSC4918/src/parser/project_parser.py",
            "attributes": [
              {
                "name": "project_data",
                "type": "ProjectData"
              },
              {
                "name": "success",
                "type": "bool"
              },
              {
                "name": "duration",
                "type": "float"
              },
              {
                "name": "errors",
                "type": "List[str]"
              },
              {
                "name": "warnings",
                "type": "List[str]"
              },
              {
                "name": "stats",
                "type": "Dict[str, Any]"
              }
            ]
          },
          {
            "name": "ProjectParser",
            "docstring": "Main orchestrator for parsing Python projects.\n\nThis class coordinates all sub-parsers and manages the overall parsing workflow,\nincluding error handling, prioritization, and token management.",
            "methods": [
              {
                "name": "__init__",
                "signature": "def __init__(self, model_name: str='gemini_2_5_pro', max_tokens: int=1000000, include_tests: bool=False, include_private: bool=False, enable_caching: bool=True)",
                "docstring": "Initialize the project parser.\n\nArgs:\n    model_name: Target LLM model name for token management\n    max_tokens: Maximum token budget\n    include_tests: Whether to include test files in parsing\n    in...",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 65,
                "file_path": "/workspaces/SYSC4918/src/parser/project_parser.py",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "model_name",
                    "type": "str",
                    "default": "'gemini_2_5_pro'"
                  },
                  {
                    "name": "max_tokens",
                    "type": "int",
                    "default": "1000000"
                  },
                  {
                    "name": "include_tests",
                    "type": "bool",
                    "default": "False"
                  },
                  {
                    "name": "include_private",
                    "type": "bool",
                    "default": "False"
                  },
                  {
                    "name": "enable_caching",
                    "type": "bool",
                    "default": "True"
                  }
                ],
                "complexity_score": 1
              },
              {
                "name": "parse_project",
                "signature": "def parse_project(self, project_path: str) -> ParseResult",
                "docstring": "Parse a Python project and extract all relevant information.\n\nArgs:\n    project_path: Path to the project root directory\n    \nReturns:\n    ParseResult containing parsed project data and metadata",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 114,
                "file_path": "/workspaces/SYSC4918/src/parser/project_parser.py",
                "return_type": "ParseResult",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "str"
                  }
                ],
                "complexity_score": 4
              },
              {
                "name": "_initialize_project_data",
                "signature": "def _initialize_project_data(self, project_path: Path) -> ProjectData",
                "docstring": "Initialize the project data structure.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 227,
                "file_path": "/workspaces/SYSC4918/src/parser/project_parser.py",
                "return_type": "ProjectData",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  }
                ],
                "complexity_score": 1
              },
              {
                "name": "_parse_metadata",
                "signature": "def _parse_metadata(self, project_path: Path, project_files: Dict[str, List[FileInfo]]) -> ProjectMetadata",
                "docstring": "Parse project metadata using the metadata parser.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 236,
                "file_path": "/workspaces/SYSC4918/src/parser/project_parser.py",
                "return_type": "ProjectMetadata",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  },
                  {
                    "name": "project_files",
                    "type": "Dict[str, List[FileInfo]]"
                  }
                ],
                "complexity_score": 2
              },
              {
                "name": "_parse_dependencies",
                "signature": "def _parse_dependencies(self, project_path: Path, project_files: Dict[str, List[FileInfo]]) -> DependencyInfo",
                "docstring": "Parse project dependencies using the dependency parser.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 246,
                "file_path": "/workspaces/SYSC4918/src/parser/project_parser.py",
                "return_type": "DependencyInfo",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  },
                  {
                    "name": "project_files",
                    "type": "Dict[str, List[FileInfo]]"
                  }
                ],
                "complexity_score": 2
              },
              {
                "name": "_parse_structure",
                "signature": "def _parse_structure(self, project_path: Path, project_files: Dict[str, List[FileInfo]]) -> ProjectStructure",
                "docstring": "Parse project structure using the structure parser.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 256,
                "file_path": "/workspaces/SYSC4918/src/parser/project_parser.py",
                "return_type": "ProjectStructure",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  },
                  {
                    "name": "project_files",
                    "type": "Dict[str, List[FileInfo]]"
                  }
                ],
                "complexity_score": 2
              },
              {
                "name": "_parse_code_information",
                "signature": "def _parse_code_information(self, structure: ProjectStructure) -> None",
                "docstring": "Parse code information for all modules in the structure.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 266,
                "file_path": "/workspaces/SYSC4918/src/parser/project_parser.py",
                "return_type": "None",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "structure",
                    "type": "ProjectStructure"
                  }
                ],
                "complexity_score": 3
              },
              {
                "name": "_parse_configuration",
                "signature": "def _parse_configuration(self, project_path: Path, project_files: Dict[str, List[FileInfo]]) -> ConfigurationInfo",
                "docstring": "Parse project configuration information.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 285,
                "file_path": "/workspaces/SYSC4918/src/parser/project_parser.py",
                "return_type": "ConfigurationInfo",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  },
                  {
                    "name": "project_files",
                    "type": "Dict[str, List[FileInfo]]"
                  }
                ],
                "complexity_score": 3
              },
              {
                "name": "_extract_examples",
                "signature": "def _extract_examples(self, structure: ProjectStructure) -> List[CodeExample]",
                "docstring": "Extract code examples using the example parser.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 308,
                "file_path": "/workspaces/SYSC4918/src/parser/project_parser.py",
                "return_type": "List[CodeExample]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "structure",
                    "type": "ProjectStructure"
                  }
                ],
                "complexity_score": 3
              },
              {
                "name": "_parse_tests",
                "signature": "def _parse_tests(self, project_path: Path, project_files: Dict[str, List[FileInfo]]) -> Optional[TestInfo]",
                "docstring": "Parse test information.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 325,
                "file_path": "/workspaces/SYSC4918/src/parser/project_parser.py",
                "return_type": "Optional[TestInfo]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  },
                  {
                    "name": "project_files",
                    "type": "Dict[str, List[FileInfo]]"
                  }
                ],
                "complexity_score": 4
              },
              {
                "name": "_parse_documentation",
                "signature": "def _parse_documentation(self, project_path: Path, project_files: Dict[str, List[FileInfo]]) -> Optional[DocumentationInfo]",
                "docstring": "Parse documentation information.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 352,
                "file_path": "/workspaces/SYSC4918/src/parser/project_parser.py",
                "return_type": "Optional[DocumentationInfo]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  },
                  {
                    "name": "project_files",
                    "type": "Dict[str, List[FileInfo]]"
                  }
                ],
                "complexity_score": 7
              },
              {
                "name": "_detect_test_framework",
                "signature": "def _detect_test_framework(self, test_files: List[str]) -> Optional[str]",
                "docstring": "Detect the test framework being used.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 393,
                "file_path": "/workspaces/SYSC4918/src/parser/project_parser.py",
                "return_type": "Optional[str]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "test_files",
                    "type": "List[str]"
                  }
                ],
                "complexity_score": 5
              },
              {
                "name": "_apply_prioritization",
                "signature": "def _apply_prioritization(self, project_data: ProjectData) -> ProjectData",
                "docstring": "Apply content prioritization and token management.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 416,
                "file_path": "/workspaces/SYSC4918/src/parser/project_parser.py",
                "return_type": "ProjectData",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_data",
                    "type": "ProjectData"
                  }
                ],
                "complexity_score": 4
              },
              {
                "name": "_filter_project_data",
                "signature": "def _filter_project_data(self, project_data: ProjectData, priority_scores: List[Any]) -> ProjectData",
                "docstring": "Filter project data based on priority scores.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 461,
                "file_path": "/workspaces/SYSC4918/src/parser/project_parser.py",
                "return_type": "ProjectData",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_data",
                    "type": "ProjectData"
                  },
                  {
                    "name": "priority_scores",
                    "type": "List[Any]"
                  }
                ],
                "complexity_score": 1
              },
              {
                "name": "get_parsing_summary",
                "signature": "def get_parsing_summary(self) -> Dict[str, Any]",
                "docstring": "Get a summary of the parsing operation.",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 468,
                "file_path": "/workspaces/SYSC4918/src/parser/project_parser.py",
                "return_type": "Dict[str, Any]",
                "parameters": [
                  {
                    "name": "self"
                  }
                ],
                "complexity_score": 1
              }
            ],
            "is_abstract": false,
            "is_dataclass": false,
            "is_enum": false,
            "line_number": 57,
            "file_path": "/workspaces/SYSC4918/src/parser/project_parser.py"
          }
        ],
        "functions": [
          {
            "name": "parse_project",
            "signature": "def parse_project(project_path: str, model_name: str='gemini_2_5_pro', max_tokens: int=1000000, include_tests: bool=False, include_private: bool=False) -> ParseResult",
            "docstring": "Parse a Python project and return structured data.\n\nArgs:\n    project_path: Path to the project root directory\n    model_name: Target LLM model name\n    max_tokens: Maximum token budget\n    include_te...",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 485,
            "file_path": "/workspaces/SYSC4918/src/parser/project_parser.py",
            "return_type": "ParseResult",
            "parameters": [
              {
                "name": "project_path",
                "type": "str"
              },
              {
                "name": "model_name",
                "type": "str",
                "default": "'gemini_2_5_pro'"
              },
              {
                "name": "max_tokens",
                "type": "int",
                "default": "1000000"
              },
              {
                "name": "include_tests",
                "type": "bool",
                "default": "False"
              },
              {
                "name": "include_private",
                "type": "bool",
                "default": "False"
              }
            ],
            "complexity_score": 1
          },
          {
            "name": "parse_project_to_json",
            "signature": "def parse_project_to_json(project_path: str, output_path: Optional[str]=None, model_name: str='gemini_2_5_pro', max_tokens: int=1000000, include_tests: bool=False, include_private: bool=False) -> Tuple[bool, str]",
            "docstring": "Parse a Python project and save results to JSON file.\n\nArgs:\n    project_path: Path to the project root directory\n    output_path: Path to save JSON file (defaults to project_path/parsed_data.json)\n  ...",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 513,
            "file_path": "/workspaces/SYSC4918/src/parser/project_parser.py",
            "return_type": "Tuple[bool, str]",
            "parameters": [
              {
                "name": "project_path",
                "type": "str"
              },
              {
                "name": "output_path",
                "type": "Optional[str]",
                "default": "None"
              },
              {
                "name": "model_name",
                "type": "str",
                "default": "'gemini_2_5_pro'"
              },
              {
                "name": "max_tokens",
                "type": "int",
                "default": "1000000"
              },
              {
                "name": "include_tests",
                "type": "bool",
                "default": "False"
              },
              {
                "name": "include_private",
                "type": "bool",
                "default": "False"
              }
            ],
            "complexity_score": 5
          }
        ],
        "imports": [
          "os",
          "time",
          "logging",
          "from pathlib import Path",
          "from typing import Dict",
          "from typing import List",
          "from typing import Any",
          "from typing import Optional",
          "from typing import Tuple",
          "from dataclasses import dataclass",
          "from dataclasses import field",
          "from datetime import datetime",
          "traceback",
          "from models.project_data import ProjectData",
          "from models.project_data import ProjectMetadata",
          "from models.project_data import DependencyInfo",
          "from models.project_data import ProjectStructure",
          "from models.project_data import ConfigurationInfo",
          "from models.project_data import CodeExample",
          "from models.project_data import TestInfo",
          "from models.project_data import DocumentationInfo",
          "from utils.file_utils import get_project_files",
          "from utils.file_utils import FileInfo",
          "from utils.token_counter import TokenCounter",
          "from utils.token_counter import get_token_budget_allocation",
          "from utils.content_prioritizer import ContentPrioritizer",
          "from utils.content_prioritizer import prioritize_project_data",
          "from utils.json_serializer import ProjectDataSerializer",
          "from metadata_parser import MetadataParser",
          "from dependency_parser import DependencyParser",
          "from code_parser import CodeParser",
          "from structure_parser import StructureParser",
          "from example_parser import ExampleParser"
        ],
        "is_package": false,
        "is_main": false,
        "line_count": 563
      },
      {
        "name": "code_parser",
        "file_path": "/workspaces/SYSC4918/src/parser/code_parser.py",
        "docstring": "Code parser for extracting classes, functions, and methods from Python files using AST.\n\nThis module provides comprehensive AST-based parsing to extract detailed information\nabout Python code structures including classes, functions, methods, decorators,\ntype hints, and docstrings.",
        "classes": [
          {
            "name": "CodeParsingError",
            "docstring": "Custom exception for code parsing errors.",
            "inheritance": [
              "Exception"
            ],
            "is_abstract": false,
            "is_dataclass": false,
            "is_enum": false,
            "line_number": 24,
            "file_path": "/workspaces/SYSC4918/src/parser/code_parser.py"
          },
          {
            "name": "ASTVisitor",
            "docstring": "Custom AST visitor for extracting code information.",
            "methods": [
              {
                "name": "__init__",
                "signature": "def __init__(self, file_path: str, include_private: bool=False)",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 32,
                "file_path": "/workspaces/SYSC4918/src/parser/code_parser.py",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "file_path",
                    "type": "str"
                  },
                  {
                    "name": "include_private",
                    "type": "bool",
                    "default": "False"
                  }
                ],
                "complexity_score": 1
              },
              {
                "name": "visit_Module",
                "signature": "def visit_Module(self, node: ast.Module) -> None",
                "docstring": "Visit module node to extract module-level docstring.",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 43,
                "file_path": "/workspaces/SYSC4918/src/parser/code_parser.py",
                "return_type": "None",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "node",
                    "type": "ast.Module"
                  }
                ],
                "complexity_score": 1
              },
              {
                "name": "visit_ClassDef",
                "signature": "def visit_ClassDef(self, node: ast.ClassDef) -> None",
                "docstring": "Visit class definition node.",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 48,
                "file_path": "/workspaces/SYSC4918/src/parser/code_parser.py",
                "return_type": "None",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "node",
                    "type": "ast.ClassDef"
                  }
                ],
                "complexity_score": 7
              },
              {
                "name": "visit_FunctionDef",
                "signature": "def visit_FunctionDef(self, node: ast.FunctionDef) -> None",
                "docstring": "Visit function definition node.",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 91,
                "file_path": "/workspaces/SYSC4918/src/parser/code_parser.py",
                "return_type": "None",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "node",
                    "type": "ast.FunctionDef"
                  }
                ],
                "complexity_score": 5
              },
              {
                "name": "visit_AsyncFunctionDef",
                "signature": "def visit_AsyncFunctionDef(self, node: ast.AsyncFunctionDef) -> None",
                "docstring": "Visit async function definition node.",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 105,
                "file_path": "/workspaces/SYSC4918/src/parser/code_parser.py",
                "return_type": "None",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "node",
                    "type": "ast.AsyncFunctionDef"
                  }
                ],
                "complexity_score": 5
              },
              {
                "name": "visit_Assign",
                "signature": "def visit_Assign(self, node: ast.Assign) -> None",
                "docstring": "Visit assignment node to extract constants.",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 119,
                "file_path": "/workspaces/SYSC4918/src/parser/code_parser.py",
                "return_type": "None",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "node",
                    "type": "ast.Assign"
                  }
                ],
                "complexity_score": 6
              },
              {
                "name": "visit_Import",
                "signature": "def visit_Import(self, node: ast.Import) -> None",
                "docstring": "Visit import node.",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 137,
                "file_path": "/workspaces/SYSC4918/src/parser/code_parser.py",
                "return_type": "None",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "node",
                    "type": "ast.Import"
                  }
                ],
                "complexity_score": 2
              },
              {
                "name": "visit_ImportFrom",
                "signature": "def visit_ImportFrom(self, node: ast.ImportFrom) -> None",
                "docstring": "Visit import from node.",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 143,
                "file_path": "/workspaces/SYSC4918/src/parser/code_parser.py",
                "return_type": "None",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "node",
                    "type": "ast.ImportFrom"
                  }
                ],
                "complexity_score": 4
              },
              {
                "name": "_extract_function_info",
                "signature": "def _extract_function_info(self, node: Union[ast.FunctionDef, ast.AsyncFunctionDef], is_method: bool=False, is_async: bool=False) -> Optional[FunctionInfo]",
                "docstring": "Extract detailed function information from AST node.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 153,
                "file_path": "/workspaces/SYSC4918/src/parser/code_parser.py",
                "return_type": "Optional[FunctionInfo]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "node",
                    "type": "Union[ast.FunctionDef, ast.AsyncFunctionDef]"
                  },
                  {
                    "name": "is_method",
                    "type": "bool",
                    "default": "False"
                  },
                  {
                    "name": "is_async",
                    "type": "bool",
                    "default": "False"
                  }
                ],
                "complexity_score": 5
              },
              {
                "name": "_extract_signature",
                "signature": "def _extract_signature(self, node: Union[ast.FunctionDef, ast.AsyncFunctionDef]) -> str",
                "docstring": "Extract function signature as string.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 191,
                "file_path": "/workspaces/SYSC4918/src/parser/code_parser.py",
                "return_type": "str",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "node",
                    "type": "Union[ast.FunctionDef, ast.AsyncFunctionDef]"
                  }
                ],
                "complexity_score": 17
              },
              {
                "name": "_format_arg",
                "signature": "def _format_arg(self, arg: ast.arg) -> str",
                "docstring": "Format argument with type annotation.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 264,
                "file_path": "/workspaces/SYSC4918/src/parser/code_parser.py",
                "return_type": "str",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "arg",
                    "type": "ast.arg"
                  }
                ],
                "complexity_score": 2
              },
              {
                "name": "_extract_parameters",
                "signature": "def _extract_parameters(self, node: Union[ast.FunctionDef, ast.AsyncFunctionDef]) -> List[Dict[str, Any]]",
                "docstring": "Extract detailed parameter information.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 271,
                "file_path": "/workspaces/SYSC4918/src/parser/code_parser.py",
                "return_type": "List[Dict[str, Any]]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "node",
                    "type": "Union[ast.FunctionDef, ast.AsyncFunctionDef]"
                  }
                ],
                "complexity_score": 9
              },
              {
                "name": "_extract_inheritance",
                "signature": "def _extract_inheritance(self, node: ast.ClassDef) -> List[str]",
                "docstring": "Extract class inheritance information.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 336,
                "file_path": "/workspaces/SYSC4918/src/parser/code_parser.py",
                "return_type": "List[str]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "node",
                    "type": "ast.ClassDef"
                  }
                ],
                "complexity_score": 3
              },
              {
                "name": "_extract_decorators",
                "signature": "def _extract_decorators(self, node: Union[ast.ClassDef, ast.FunctionDef, ast.AsyncFunctionDef]) -> List[str]",
                "docstring": "Extract decorator information.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 346,
                "file_path": "/workspaces/SYSC4918/src/parser/code_parser.py",
                "return_type": "List[str]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "node",
                    "type": "Union[ast.ClassDef, ast.FunctionDef, ast.AsyncFunctionDef]"
                  }
                ],
                "complexity_score": 3
              },
              {
                "name": "_is_abstract_class",
                "signature": "def _is_abstract_class(self, node: ast.ClassDef) -> bool",
                "docstring": "Check if class is abstract.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 356,
                "file_path": "/workspaces/SYSC4918/src/parser/code_parser.py",
                "return_type": "bool",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "node",
                    "type": "ast.ClassDef"
                  }
                ],
                "complexity_score": 13
              },
              {
                "name": "_is_dataclass",
                "signature": "def _is_dataclass(self, node: ast.ClassDef) -> bool",
                "docstring": "Check if class is a dataclass.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 377,
                "file_path": "/workspaces/SYSC4918/src/parser/code_parser.py",
                "return_type": "bool",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "node",
                    "type": "ast.ClassDef"
                  }
                ],
                "complexity_score": 6
              },
              {
                "name": "_is_enum_class",
                "signature": "def _is_enum_class(self, node: ast.ClassDef) -> bool",
                "docstring": "Check if class is an enum.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 386,
                "file_path": "/workspaces/SYSC4918/src/parser/code_parser.py",
                "return_type": "bool",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "node",
                    "type": "ast.ClassDef"
                  }
                ],
                "complexity_score": 6
              },
              {
                "name": "_extract_class_attributes",
                "signature": "def _extract_class_attributes(self, node: ast.ClassDef) -> List[Dict[str, Any]]",
                "docstring": "Extract class attributes.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 395,
                "file_path": "/workspaces/SYSC4918/src/parser/code_parser.py",
                "return_type": "List[Dict[str, Any]]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "node",
                    "type": "ast.ClassDef"
                  }
                ],
                "complexity_score": 7
              },
              {
                "name": "_extract_value",
                "signature": "def _extract_value(self, node: ast.AST) -> Any",
                "docstring": "Extract value from AST node.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 421,
                "file_path": "/workspaces/SYSC4918/src/parser/code_parser.py",
                "return_type": "Any",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "node",
                    "type": "ast.AST"
                  }
                ],
                "complexity_score": 6
              },
              {
                "name": "_infer_type",
                "signature": "def _infer_type(self, node: ast.AST) -> Optional[str]",
                "docstring": "Infer type from AST node.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 437,
                "file_path": "/workspaces/SYSC4918/src/parser/code_parser.py",
                "return_type": "Optional[str]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "node",
                    "type": "ast.AST"
                  }
                ],
                "complexity_score": 7
              },
              {
                "name": "_calculate_complexity",
                "signature": "def _calculate_complexity(self, node: ast.AST) -> int",
                "docstring": "Calculate cyclomatic complexity.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 455,
                "file_path": "/workspaces/SYSC4918/src/parser/code_parser.py",
                "return_type": "int",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "node",
                    "type": "ast.AST"
                  }
                ],
                "complexity_score": 5
              }
            ],
            "inheritance": [
              "ast.NodeVisitor"
            ],
            "is_abstract": false,
            "is_dataclass": false,
            "is_enum": false,
            "line_number": 29,
            "file_path": "/workspaces/SYSC4918/src/parser/code_parser.py"
          },
          {
            "name": "CodeParser",
            "docstring": "Main code parser for extracting information from Python files.",
            "methods": [
              {
                "name": "__init__",
                "signature": "def __init__(self, include_private: bool=False)",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 473,
                "file_path": "/workspaces/SYSC4918/src/parser/code_parser.py",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "include_private",
                    "type": "bool",
                    "default": "False"
                  }
                ],
                "complexity_score": 1
              },
              {
                "name": "parse_file",
                "signature": "def parse_file(self, file_path: str) -> ModuleInfo",
                "docstring": "Parse a Python file and extract code information.\n\nArgs:\n    file_path: Path to the Python file\n    \nReturns:\n    ModuleInfo object with extracted information",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 476,
                "file_path": "/workspaces/SYSC4918/src/parser/code_parser.py",
                "return_type": "ModuleInfo",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "file_path",
                    "type": "str"
                  }
                ],
                "complexity_score": 5
              },
              {
                "name": "parse_code_string",
                "signature": "def parse_code_string(self, code: str, file_path: str='<string>') -> ModuleInfo",
                "docstring": "Parse Python code from string.\n\nArgs:\n    code: Python code as string\n    file_path: Virtual file path for reference\n    \nReturns:\n    ModuleInfo object with extracted information",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 522,
                "file_path": "/workspaces/SYSC4918/src/parser/code_parser.py",
                "return_type": "ModuleInfo",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "code",
                    "type": "str"
                  },
                  {
                    "name": "file_path",
                    "type": "str",
                    "default": "'<string>'"
                  }
                ],
                "complexity_score": 3
              }
            ],
            "is_abstract": false,
            "is_dataclass": false,
            "is_enum": false,
            "line_number": 470,
            "file_path": "/workspaces/SYSC4918/src/parser/code_parser.py"
          }
        ],
        "functions": [
          {
            "name": "extract_code_information",
            "signature": "def extract_code_information(file_path: str, include_private: bool=False) -> ModuleInfo",
            "docstring": "Extract code information from a Python file.\n\nArgs:\n    file_path: Path to the Python file\n    include_private: Whether to include private methods/classes\n    \nReturns:\n    ModuleInfo object with extr...",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 562,
            "file_path": "/workspaces/SYSC4918/src/parser/code_parser.py",
            "return_type": "ModuleInfo",
            "parameters": [
              {
                "name": "file_path",
                "type": "str"
              },
              {
                "name": "include_private",
                "type": "bool",
                "default": "False"
              }
            ],
            "complexity_score": 1
          },
          {
            "name": "parse_python_file",
            "signature": "def parse_python_file(file_path: str) -> ModuleInfo",
            "docstring": "Parse a Python file and return module information.\n\nArgs:\n    file_path: Path to the Python file\n    \nReturns:\n    ModuleInfo object",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 577,
            "file_path": "/workspaces/SYSC4918/src/parser/code_parser.py",
            "return_type": "ModuleInfo",
            "parameters": [
              {
                "name": "file_path",
                "type": "str"
              }
            ],
            "complexity_score": 1
          },
          {
            "name": "analyze_ast_node",
            "signature": "def analyze_ast_node(node: ast.AST) -> Dict[str, Any]",
            "docstring": "Analyze an AST node and return information about it.\n\nArgs:\n    node: AST node to analyze\n    \nReturns:\n    Dictionary with node information",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 591,
            "file_path": "/workspaces/SYSC4918/src/parser/code_parser.py",
            "return_type": "Dict[str, Any]",
            "parameters": [
              {
                "name": "node",
                "type": "ast.AST"
              }
            ],
            "complexity_score": 1
          }
        ],
        "imports": [
          "ast",
          "re",
          "inspect",
          "from pathlib import Path",
          "from typing import Dict",
          "from typing import List",
          "from typing import Any",
          "from typing import Optional",
          "from typing import Union",
          "from typing import Tuple",
          "logging",
          "from models.project_data import ClassInfo",
          "from models.project_data import FunctionInfo",
          "from models.project_data import ModuleInfo",
          "from models.project_data import CodeExample",
          "from utils.file_utils import read_file_safely"
        ],
        "is_package": false,
        "is_main": false,
        "line_count": 606
      },
      {
        "name": "example_parser",
        "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py",
        "docstring": "Example parser for extracting code examples and usage patterns from Python projects.\n\nThis module extracts code examples from docstrings, example files, and usage patterns\nthroughout the codebase to help generate comprehensive README documentation.",
        "classes": [
          {
            "name": "ExampleParser",
            "docstring": "Parser for extracting code examples and usage patterns.",
            "methods": [
              {
                "name": "__init__",
                "signature": "def __init__(self)",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 23,
                "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py",
                "parameters": [
                  {
                    "name": "self"
                  }
                ],
                "complexity_score": 1
              },
              {
                "name": "extract_from_module",
                "signature": "def extract_from_module(self, module: ModuleInfo) -> List[CodeExample]",
                "docstring": "Extract code examples from a module.\n\nArgs:\n    module: ModuleInfo object to extract examples from\n    \nReturns:\n    List of CodeExample objects",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 45,
                "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py",
                "return_type": "List[CodeExample]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "module",
                    "type": "ModuleInfo"
                  }
                ],
                "complexity_score": 5
              },
              {
                "name": "extract_from_project",
                "signature": "def extract_from_project(self, project_path: str) -> List[CodeExample]",
                "docstring": "Extract code examples from an entire project.\n\nArgs:\n    project_path: Path to project root\n    \nReturns:\n    List of CodeExample objects",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 86,
                "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py",
                "return_type": "List[CodeExample]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "str"
                  }
                ],
                "complexity_score": 3
              },
              {
                "name": "_extract_from_docstring",
                "signature": "def _extract_from_docstring(self, docstring: str, context: str, file_path: Optional[str]=None) -> List[CodeExample]",
                "docstring": "Extract examples from a docstring.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 122,
                "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py",
                "return_type": "List[CodeExample]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "docstring",
                    "type": "str"
                  },
                  {
                    "name": "context",
                    "type": "str"
                  },
                  {
                    "name": "file_path",
                    "type": "Optional[str]",
                    "default": "None"
                  }
                ],
                "complexity_score": 1
              },
              {
                "name": "_extract_from_class",
                "signature": "def _extract_from_class(self, class_info: ClassInfo) -> List[CodeExample]",
                "docstring": "Extract examples from a class.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 140,
                "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py",
                "return_type": "List[CodeExample]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "class_info",
                    "type": "ClassInfo"
                  }
                ],
                "complexity_score": 4
              },
              {
                "name": "_extract_from_function",
                "signature": "def _extract_from_function(self, function_info: FunctionInfo) -> List[CodeExample]",
                "docstring": "Extract examples from a function.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 165,
                "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py",
                "return_type": "List[CodeExample]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "function_info",
                    "type": "FunctionInfo"
                  }
                ],
                "complexity_score": 2
              },
              {
                "name": "_extract_doctests",
                "signature": "def _extract_doctests(self, docstring: str, context: str, file_path: Optional[str]=None) -> List[CodeExample]",
                "docstring": "Extract doctest examples from docstring.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 179,
                "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py",
                "return_type": "List[CodeExample]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "docstring",
                    "type": "str"
                  },
                  {
                    "name": "context",
                    "type": "str"
                  },
                  {
                    "name": "file_path",
                    "type": "Optional[str]",
                    "default": "None"
                  }
                ],
                "complexity_score": 15
              },
              {
                "name": "_extract_code_blocks",
                "signature": "def _extract_code_blocks(self, docstring: str, context: str, file_path: Optional[str]=None) -> List[CodeExample]",
                "docstring": "Extract code blocks from docstring.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 232,
                "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py",
                "return_type": "List[CodeExample]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "docstring",
                    "type": "str"
                  },
                  {
                    "name": "context",
                    "type": "str"
                  },
                  {
                    "name": "file_path",
                    "type": "Optional[str]",
                    "default": "None"
                  }
                ],
                "complexity_score": 3
              },
              {
                "name": "_extract_example_sections",
                "signature": "def _extract_example_sections(self, docstring: str, context: str, file_path: Optional[str]=None) -> List[CodeExample]",
                "docstring": "Extract example sections from docstring.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 255,
                "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py",
                "return_type": "List[CodeExample]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "docstring",
                    "type": "str"
                  },
                  {
                    "name": "context",
                    "type": "str"
                  },
                  {
                    "name": "file_path",
                    "type": "Optional[str]",
                    "default": "None"
                  }
                ],
                "complexity_score": 10
              },
              {
                "name": "_extract_from_source_file",
                "signature": "def _extract_from_source_file(self, file_path: str) -> List[CodeExample]",
                "docstring": "Extract examples from source file by analyzing the code.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 289,
                "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py",
                "return_type": "List[CodeExample]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "file_path",
                    "type": "str"
                  }
                ],
                "complexity_score": 3
              },
              {
                "name": "_extract_main_block_examples",
                "signature": "def _extract_main_block_examples(self, tree: ast.AST, file_path: str) -> List[CodeExample]",
                "docstring": "Extract examples from if __name__ == \"__main__\": blocks.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 314,
                "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py",
                "return_type": "List[CodeExample]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "tree",
                    "type": "ast.AST"
                  },
                  {
                    "name": "file_path",
                    "type": "str"
                  }
                ],
                "complexity_score": 7
              },
              {
                "name": "_extract_example_functions",
                "signature": "def _extract_example_functions(self, tree: ast.AST, file_path: str) -> List[CodeExample]",
                "docstring": "Extract example functions.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 346,
                "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py",
                "return_type": "List[CodeExample]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "tree",
                    "type": "ast.AST"
                  },
                  {
                    "name": "file_path",
                    "type": "str"
                  }
                ],
                "complexity_score": 7
              },
              {
                "name": "_find_example_files",
                "signature": "def _find_example_files(self, project_path: Path) -> List[str]",
                "docstring": "Find example files in the project.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 378,
                "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py",
                "return_type": "List[str]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  }
                ],
                "complexity_score": 5
              },
              {
                "name": "_extract_from_example_file",
                "signature": "def _extract_from_example_file(self, file_path: str) -> List[CodeExample]",
                "docstring": "Extract examples from example files.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 399,
                "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py",
                "return_type": "List[CodeExample]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "file_path",
                    "type": "str"
                  }
                ],
                "complexity_score": 4
              },
              {
                "name": "_extract_from_readme",
                "signature": "def _extract_from_readme(self, project_path: Path) -> List[CodeExample]",
                "docstring": "Extract examples from README files.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 437,
                "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py",
                "return_type": "List[CodeExample]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  }
                ],
                "complexity_score": 9
              },
              {
                "name": "_extract_from_test_files",
                "signature": "def _extract_from_test_files(self, project_path: Path) -> List[CodeExample]",
                "docstring": "Extract usage patterns from test files.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 471,
                "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py",
                "return_type": "List[CodeExample]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  }
                ],
                "complexity_score": 6
              },
              {
                "name": "_extract_usage_from_test_file",
                "signature": "def _extract_usage_from_test_file(self, test_file: str) -> List[CodeExample]",
                "docstring": "Extract usage patterns from a test file.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 494,
                "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py",
                "return_type": "List[CodeExample]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "test_file",
                    "type": "str"
                  }
                ],
                "complexity_score": 13
              },
              {
                "name": "_is_main_block",
                "signature": "def _is_main_block(self, node: ast.If) -> bool",
                "docstring": "Check if an if statement is a main block.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 539,
                "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py",
                "return_type": "bool",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "node",
                    "type": "ast.If"
                  }
                ],
                "complexity_score": 8
              },
              {
                "name": "_is_executable_code",
                "signature": "def _is_executable_code(self, code: str) -> bool",
                "docstring": "Check if code is likely executable.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 556,
                "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py",
                "return_type": "bool",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "code",
                    "type": "str"
                  }
                ],
                "complexity_score": 1
              }
            ],
            "is_abstract": false,
            "is_dataclass": false,
            "is_enum": false,
            "line_number": 20,
            "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py"
          }
        ],
        "functions": [
          {
            "name": "extract_code_examples",
            "signature": "def extract_code_examples(module: ModuleInfo) -> List[CodeExample]",
            "docstring": "Extract code examples from a module.\n\nArgs:\n    module: ModuleInfo object to extract examples from\n    \nReturns:\n    List of CodeExample objects",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 568,
            "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py",
            "return_type": "List[CodeExample]",
            "parameters": [
              {
                "name": "module",
                "type": "ModuleInfo"
              }
            ],
            "complexity_score": 1
          },
          {
            "name": "parse_docstring_examples",
            "signature": "def parse_docstring_examples(docstring: str, context: str='Unknown') -> List[CodeExample]",
            "docstring": "Parse code examples from a docstring.\n\nArgs:\n    docstring: Docstring text to parse\n    context: Context description for the examples\n    \nReturns:\n    List of CodeExample objects",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 582,
            "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py",
            "return_type": "List[CodeExample]",
            "parameters": [
              {
                "name": "docstring",
                "type": "str"
              },
              {
                "name": "context",
                "type": "str",
                "default": "'Unknown'"
              }
            ],
            "complexity_score": 1
          },
          {
            "name": "find_usage_patterns",
            "signature": "def find_usage_patterns(project_path: str) -> List[CodeExample]",
            "docstring": "Find usage patterns in a Python project.\n\nArgs:\n    project_path: Path to project root\n    \nReturns:\n    List of CodeExample objects",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 597,
            "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py",
            "return_type": "List[CodeExample]",
            "parameters": [
              {
                "name": "project_path",
                "type": "str"
              }
            ],
            "complexity_score": 1
          }
        ],
        "imports": [
          "re",
          "ast",
          "from pathlib import Path",
          "from typing import Dict",
          "from typing import List",
          "from typing import Any",
          "from typing import Optional",
          "from typing import Tuple",
          "logging",
          "from models.project_data import CodeExample",
          "from models.project_data import ModuleInfo",
          "from models.project_data import ClassInfo",
          "from models.project_data import FunctionInfo",
          "from utils.file_utils import read_file_safely",
          "from utils.file_utils import find_files_by_pattern"
        ],
        "is_package": false,
        "is_main": false,
        "line_count": 608
      },
      {
        "name": "dependency_parser",
        "file_path": "/workspaces/SYSC4918/src/parser/dependency_parser.py",
        "docstring": "Dependency parser for extracting project dependencies and requirements.\n\nThis module parses dependencies from requirements.txt, pyproject.toml, setup.py,\nand other dependency specification files commonly found in Python projects.",
        "classes": [
          {
            "name": "DependencyParser",
            "docstring": "Parser for extracting project dependencies from various sources.",
            "methods": [
              {
                "name": "__init__",
                "signature": "def __init__(self)",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 34,
                "file_path": "/workspaces/SYSC4918/src/parser/dependency_parser.py",
                "parameters": [
                  {
                    "name": "self"
                  }
                ],
                "complexity_score": 1
              },
              {
                "name": "parse",
                "signature": "def parse(self, project_path: Path, project_files: Dict[str, List[FileInfo]]) -> DependencyInfo",
                "docstring": "Parse project dependencies from various sources.\n\nArgs:\n    project_path: Path to project root\n    project_files: Dictionary of categorized project files\n    \nReturns:\n    DependencyInfo object with e...",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 54,
                "file_path": "/workspaces/SYSC4918/src/parser/dependency_parser.py",
                "return_type": "DependencyInfo",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  },
                  {
                    "name": "project_files",
                    "type": "Dict[str, List[FileInfo]]"
                  }
                ],
                "complexity_score": 5
              },
              {
                "name": "_parse_pyproject_toml",
                "signature": "def _parse_pyproject_toml(self, project_path: Path, dependency_info: DependencyInfo) -> bool",
                "docstring": "Parse dependencies from pyproject.toml file.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 99,
                "file_path": "/workspaces/SYSC4918/src/parser/dependency_parser.py",
                "return_type": "bool",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  },
                  {
                    "name": "dependency_info",
                    "type": "DependencyInfo"
                  }
                ],
                "complexity_score": 26
              },
              {
                "name": "_parse_requirements_files",
                "signature": "def _parse_requirements_files(self, project_path: Path, dependency_info: DependencyInfo) -> List[str]",
                "docstring": "Parse various requirements.txt files.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 190,
                "file_path": "/workspaces/SYSC4918/src/parser/dependency_parser.py",
                "return_type": "List[str]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  },
                  {
                    "name": "dependency_info",
                    "type": "DependencyInfo"
                  }
                ],
                "complexity_score": 6
              },
              {
                "name": "_parse_requirements_file",
                "signature": "def _parse_requirements_file(self, file_path: str) -> List[str]",
                "docstring": "Parse a single requirements.txt file.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 223,
                "file_path": "/workspaces/SYSC4918/src/parser/dependency_parser.py",
                "return_type": "List[str]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "file_path",
                    "type": "str"
                  }
                ],
                "complexity_score": 12
              },
              {
                "name": "_parse_setup_py",
                "signature": "def _parse_setup_py(self, project_path: Path, dependency_info: DependencyInfo) -> bool",
                "docstring": "Parse dependencies from setup.py file.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 266,
                "file_path": "/workspaces/SYSC4918/src/parser/dependency_parser.py",
                "return_type": "bool",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  },
                  {
                    "name": "dependency_info",
                    "type": "DependencyInfo"
                  }
                ],
                "complexity_score": 11
              },
              {
                "name": "_parse_setup_cfg",
                "signature": "def _parse_setup_cfg(self, project_path: Path, dependency_info: DependencyInfo) -> bool",
                "docstring": "Parse dependencies from setup.cfg file.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 295,
                "file_path": "/workspaces/SYSC4918/src/parser/dependency_parser.py",
                "return_type": "bool",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  },
                  {
                    "name": "dependency_info",
                    "type": "DependencyInfo"
                  }
                ],
                "complexity_score": 10
              },
              {
                "name": "_parse_pipfile",
                "signature": "def _parse_pipfile(self, project_path: Path, dependency_info: DependencyInfo) -> bool",
                "docstring": "Parse dependencies from Pipfile.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 338,
                "file_path": "/workspaces/SYSC4918/src/parser/dependency_parser.py",
                "return_type": "bool",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  },
                  {
                    "name": "dependency_info",
                    "type": "DependencyInfo"
                  }
                ],
                "complexity_score": 10
              },
              {
                "name": "_detect_python_version",
                "signature": "def _detect_python_version(self, project_path: Path, dependency_info: DependencyInfo) -> None",
                "docstring": "Detect Python version requirements from various sources.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 380,
                "file_path": "/workspaces/SYSC4918/src/parser/dependency_parser.py",
                "return_type": "None",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  },
                  {
                    "name": "dependency_info",
                    "type": "DependencyInfo"
                  }
                ],
                "complexity_score": 14
              },
              {
                "name": "_normalize_dependencies",
                "signature": "def _normalize_dependencies(self, deps: List[str]) -> List[str]",
                "docstring": "Normalize dependency specifications.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 427,
                "file_path": "/workspaces/SYSC4918/src/parser/dependency_parser.py",
                "return_type": "List[str]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "deps",
                    "type": "List[str]"
                  }
                ],
                "complexity_score": 7
              },
              {
                "name": "_convert_poetry_dependencies",
                "signature": "def _convert_poetry_dependencies(self, deps: Dict[str, Any]) -> List[str]",
                "docstring": "Convert Poetry dependency format to standard format.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 447,
                "file_path": "/workspaces/SYSC4918/src/parser/dependency_parser.py",
                "return_type": "List[str]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "deps",
                    "type": "Dict[str, Any]"
                  }
                ],
                "complexity_score": 11
              },
              {
                "name": "_convert_pipfile_dependencies",
                "signature": "def _convert_pipfile_dependencies(self, deps: Dict[str, Any]) -> List[str]",
                "docstring": "Convert Pipfile dependency format to standard format.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 479,
                "file_path": "/workspaces/SYSC4918/src/parser/dependency_parser.py",
                "return_type": "List[str]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "deps",
                    "type": "Dict[str, Any]"
                  }
                ],
                "complexity_score": 7
              },
              {
                "name": "_extract_setup_dependencies",
                "signature": "def _extract_setup_dependencies(self, keyword: ast.keyword, dependency_info: DependencyInfo) -> None",
                "docstring": "Extract dependencies from setup() call arguments.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 503,
                "file_path": "/workspaces/SYSC4918/src/parser/dependency_parser.py",
                "return_type": "None",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "keyword",
                    "type": "ast.keyword"
                  },
                  {
                    "name": "dependency_info",
                    "type": "DependencyInfo"
                  }
                ],
                "complexity_score": 10
              },
              {
                "name": "_extract_list_from_ast",
                "signature": "def _extract_list_from_ast(self, node: ast.AST) -> List[str]",
                "docstring": "Extract list of strings from AST node.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 530,
                "file_path": "/workspaces/SYSC4918/src/parser/dependency_parser.py",
                "return_type": "List[str]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "node",
                    "type": "ast.AST"
                  }
                ],
                "complexity_score": 5
              },
              {
                "name": "_parse_multiline_deps",
                "signature": "def _parse_multiline_deps(self, deps_str: str) -> List[str]",
                "docstring": "Parse multiline dependency string from setup.cfg.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 543,
                "file_path": "/workspaces/SYSC4918/src/parser/dependency_parser.py",
                "return_type": "List[str]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "deps_str",
                    "type": "str"
                  }
                ],
                "complexity_score": 4
              },
              {
                "name": "_is_dev_dependency_group",
                "signature": "def _is_dev_dependency_group(self, group_name: str) -> bool",
                "docstring": "Check if a dependency group is for development.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 552,
                "file_path": "/workspaces/SYSC4918/src/parser/dependency_parser.py",
                "return_type": "bool",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "group_name",
                    "type": "str"
                  }
                ],
                "complexity_score": 1
              },
              {
                "name": "_clean_dependencies",
                "signature": "def _clean_dependencies(self, dependency_info: DependencyInfo) -> None",
                "docstring": "Clean and deduplicate dependencies.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 556,
                "file_path": "/workspaces/SYSC4918/src/parser/dependency_parser.py",
                "return_type": "None",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "dependency_info",
                    "type": "DependencyInfo"
                  }
                ],
                "complexity_score": 3
              }
            ],
            "is_abstract": false,
            "is_dataclass": false,
            "is_enum": false,
            "line_number": 31,
            "file_path": "/workspaces/SYSC4918/src/parser/dependency_parser.py"
          }
        ],
        "functions": [
          {
            "name": "extract_dependencies",
            "signature": "def extract_dependencies(project_path: str, project_files: Dict[str, List[FileInfo]]) -> DependencyInfo",
            "docstring": "Extract dependencies from a project directory.\n\nArgs:\n    project_path: Path to project root\n    project_files: Dictionary of categorized project files\n    \nReturns:\n    DependencyInfo object",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 576,
            "file_path": "/workspaces/SYSC4918/src/parser/dependency_parser.py",
            "return_type": "DependencyInfo",
            "parameters": [
              {
                "name": "project_path",
                "type": "str"
              },
              {
                "name": "project_files",
                "type": "Dict[str, List[FileInfo]]"
              }
            ],
            "complexity_score": 1
          },
          {
            "name": "parse_requirements_file",
            "signature": "def parse_requirements_file(file_path: str) -> List[str]",
            "docstring": "Parse a single requirements.txt file.\n\nArgs:\n    file_path: Path to requirements file\n    \nReturns:\n    List of dependency specifications",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 591,
            "file_path": "/workspaces/SYSC4918/src/parser/dependency_parser.py",
            "return_type": "List[str]",
            "parameters": [
              {
                "name": "file_path",
                "type": "str"
              }
            ],
            "complexity_score": 1
          },
          {
            "name": "detect_python_version",
            "signature": "def detect_python_version(project_path: str) -> Optional[str]",
            "docstring": "Detect Python version requirements for a project.\n\nArgs:\n    project_path: Path to project root\n    \nReturns:\n    Python version requirement string or None",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 605,
            "file_path": "/workspaces/SYSC4918/src/parser/dependency_parser.py",
            "return_type": "Optional[str]",
            "parameters": [
              {
                "name": "project_path",
                "type": "str"
              }
            ],
            "complexity_score": 1
          }
        ],
        "imports": [
          "os",
          "re",
          "ast",
          "configparser",
          "from pathlib import Path",
          "from typing import Dict",
          "from typing import List",
          "from typing import Any",
          "from typing import Optional",
          "from typing import Set",
          "from typing import Tuple",
          "logging",
          "from models.project_data import DependencyInfo",
          "from utils.file_utils import read_file_safely",
          "from utils.file_utils import FileInfo",
          "tomllib",
          "tomllib"
        ],
        "is_package": false,
        "is_main": false,
        "line_count": 618
      },
      {
        "name": "metadata_parser",
        "file_path": "/workspaces/SYSC4918/src/parser/metadata_parser.py",
        "docstring": "Project metadata parser for extracting information from various configuration files.\n\nThis module extracts project metadata from setup.py, pyproject.toml, setup.cfg,\nand other configuration files commonly found in Python projects.",
        "classes": [
          {
            "name": "MetadataParser",
            "docstring": "Parser for extracting project metadata from various configuration files.",
            "methods": [
              {
                "name": "__init__",
                "signature": "def __init__(self)",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 40,
                "file_path": "/workspaces/SYSC4918/src/parser/metadata_parser.py",
                "parameters": [
                  {
                    "name": "self"
                  }
                ],
                "complexity_score": 1
              },
              {
                "name": "parse",
                "signature": "def parse(self, project_path: Path, project_files: Dict[str, List[FileInfo]]) -> ProjectMetadata",
                "docstring": "Parse project metadata from various configuration files.\n\nArgs:\n    project_path: Path to project root\n    project_files: Dictionary of categorized project files\n    \nReturns:\n    ProjectMetadata obje...",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 58,
                "file_path": "/workspaces/SYSC4918/src/parser/metadata_parser.py",
                "return_type": "ProjectMetadata",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  },
                  {
                    "name": "project_files",
                    "type": "Dict[str, List[FileInfo]]"
                  }
                ],
                "complexity_score": 4
              },
              {
                "name": "_parse_pyproject_toml",
                "signature": "def _parse_pyproject_toml(self, project_path: Path, metadata: ProjectMetadata) -> bool",
                "docstring": "Parse metadata from pyproject.toml file.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 101,
                "file_path": "/workspaces/SYSC4918/src/parser/metadata_parser.py",
                "return_type": "bool",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  },
                  {
                    "name": "metadata",
                    "type": "ProjectMetadata"
                  }
                ],
                "complexity_score": 28
              },
              {
                "name": "_parse_setup_py",
                "signature": "def _parse_setup_py(self, project_path: Path, metadata: ProjectMetadata) -> bool",
                "docstring": "Parse metadata from setup.py file.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 193,
                "file_path": "/workspaces/SYSC4918/src/parser/metadata_parser.py",
                "return_type": "bool",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  },
                  {
                    "name": "metadata",
                    "type": "ProjectMetadata"
                  }
                ],
                "complexity_score": 11
              },
              {
                "name": "_parse_setup_cfg",
                "signature": "def _parse_setup_cfg(self, project_path: Path, metadata: ProjectMetadata) -> bool",
                "docstring": "Parse metadata from setup.cfg file.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 222,
                "file_path": "/workspaces/SYSC4918/src/parser/metadata_parser.py",
                "return_type": "bool",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  },
                  {
                    "name": "metadata",
                    "type": "ProjectMetadata"
                  }
                ],
                "complexity_score": 8
              },
              {
                "name": "_parse_package_init",
                "signature": "def _parse_package_init(self, project_path: Path, metadata: ProjectMetadata, project_files: Dict[str, List[FileInfo]]) -> None",
                "docstring": "Parse metadata from package __init__.py files.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 268,
                "file_path": "/workspaces/SYSC4918/src/parser/metadata_parser.py",
                "return_type": "None",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  },
                  {
                    "name": "metadata",
                    "type": "ProjectMetadata"
                  },
                  {
                    "name": "project_files",
                    "type": "Dict[str, List[FileInfo]]"
                  }
                ],
                "complexity_score": 15
              },
              {
                "name": "_extract_git_info",
                "signature": "def _extract_git_info(self, project_path: Path, metadata: ProjectMetadata) -> None",
                "docstring": "Extract repository information from git.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 308,
                "file_path": "/workspaces/SYSC4918/src/parser/metadata_parser.py",
                "return_type": "None",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  },
                  {
                    "name": "metadata",
                    "type": "ProjectMetadata"
                  }
                ],
                "complexity_score": 9
              },
              {
                "name": "_detect_project_type",
                "signature": "def _detect_project_type(self, metadata: ProjectMetadata, project_files: Dict[str, List[FileInfo]]) -> ProjectType",
                "docstring": "Detect project type based on metadata and file structure.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 336,
                "file_path": "/workspaces/SYSC4918/src/parser/metadata_parser.py",
                "return_type": "ProjectType",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "metadata",
                    "type": "ProjectMetadata"
                  },
                  {
                    "name": "project_files",
                    "type": "Dict[str, List[FileInfo]]"
                  }
                ],
                "complexity_score": 8
              },
              {
                "name": "_detect_license",
                "signature": "def _detect_license(self, project_path: Path, metadata: ProjectMetadata) -> Optional[LicenseType]",
                "docstring": "Detect license from license files or metadata.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 364,
                "file_path": "/workspaces/SYSC4918/src/parser/metadata_parser.py",
                "return_type": "Optional[LicenseType]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  },
                  {
                    "name": "metadata",
                    "type": "ProjectMetadata"
                  }
                ],
                "complexity_score": 6
              },
              {
                "name": "_parse_license_string",
                "signature": "def _parse_license_string(self, license_str: str) -> Optional[LicenseType]",
                "docstring": "Parse license string to determine license type.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 384,
                "file_path": "/workspaces/SYSC4918/src/parser/metadata_parser.py",
                "return_type": "Optional[LicenseType]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "license_str",
                    "type": "str"
                  }
                ],
                "complexity_score": 3
              },
              {
                "name": "_extract_setup_argument",
                "signature": "def _extract_setup_argument(self, keyword: ast.keyword, metadata: ProjectMetadata, content: str) -> None",
                "docstring": "Extract argument from setup() call.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 394,
                "file_path": "/workspaces/SYSC4918/src/parser/metadata_parser.py",
                "return_type": "None",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "keyword",
                    "type": "ast.keyword"
                  },
                  {
                    "name": "metadata",
                    "type": "ProjectMetadata"
                  },
                  {
                    "name": "content",
                    "type": "str"
                  }
                ],
                "complexity_score": 24
              },
              {
                "name": "_parse_tool_metadata",
                "signature": "def _parse_tool_metadata(self, tool_data: Dict[str, Any], metadata: ProjectMetadata) -> None",
                "docstring": "Parse tool-specific metadata from pyproject.toml.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 429,
                "file_path": "/workspaces/SYSC4918/src/parser/metadata_parser.py",
                "return_type": "None",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "tool_data",
                    "type": "Dict[str, Any]"
                  },
                  {
                    "name": "metadata",
                    "type": "ProjectMetadata"
                  }
                ],
                "complexity_score": 15
              }
            ],
            "is_abstract": false,
            "is_dataclass": false,
            "is_enum": false,
            "line_number": 37,
            "file_path": "/workspaces/SYSC4918/src/parser/metadata_parser.py"
          }
        ],
        "functions": [
          {
            "name": "extract_project_metadata",
            "signature": "def extract_project_metadata(project_path: str, project_files: Dict[str, List[FileInfo]]) -> ProjectMetadata",
            "docstring": "Extract project metadata from a project directory.\n\nArgs:\n    project_path: Path to project root\n    project_files: Dictionary of categorized project files\n    \nReturns:\n    ProjectMetadata object",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 467,
            "file_path": "/workspaces/SYSC4918/src/parser/metadata_parser.py",
            "return_type": "ProjectMetadata",
            "parameters": [
              {
                "name": "project_path",
                "type": "str"
              },
              {
                "name": "project_files",
                "type": "Dict[str, List[FileInfo]]"
              }
            ],
            "complexity_score": 1
          },
          {
            "name": "detect_project_type",
            "signature": "def detect_project_type(project_path: str, project_files: Dict[str, List[FileInfo]]) -> ProjectType",
            "docstring": "Detect the type of a Python project.\n\nArgs:\n    project_path: Path to project root\n    project_files: Dictionary of categorized project files\n    \nReturns:\n    ProjectType enum value",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 482,
            "file_path": "/workspaces/SYSC4918/src/parser/metadata_parser.py",
            "return_type": "ProjectType",
            "parameters": [
              {
                "name": "project_path",
                "type": "str"
              },
              {
                "name": "project_files",
                "type": "Dict[str, List[FileInfo]]"
              }
            ],
            "complexity_score": 1
          },
          {
            "name": "find_license_info",
            "signature": "def find_license_info(project_path: str) -> Optional[LicenseType]",
            "docstring": "Find license information for a project.\n\nArgs:\n    project_path: Path to project root\n    \nReturns:\n    LicenseType enum value or None",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 498,
            "file_path": "/workspaces/SYSC4918/src/parser/metadata_parser.py",
            "return_type": "Optional[LicenseType]",
            "parameters": [
              {
                "name": "project_path",
                "type": "str"
              }
            ],
            "complexity_score": 1
          }
        ],
        "imports": [
          "os",
          "re",
          "ast",
          "configparser",
          "from pathlib import Path",
          "from typing import Dict",
          "from typing import List",
          "from typing import Any",
          "from typing import Optional",
          "from typing import Union",
          "logging",
          "from models.project_data import ProjectMetadata",
          "from models.project_data import ProjectType",
          "from models.project_data import LicenseType",
          "from utils.file_utils import read_file_safely",
          "from utils.file_utils import FileInfo",
          "tomllib",
          "tomllib",
          "git"
        ],
        "is_package": false,
        "is_main": false,
        "line_count": 510
      },
      {
        "name": "structure_parser",
        "file_path": "/workspaces/SYSC4918/src/parser/structure_parser.py",
        "docstring": "Project structure parser for analyzing Python project organization.\n\nThis module analyzes the overall structure of Python projects, identifying\nmain packages, entry points, directory organization, and project layout patterns.",
        "classes": [
          {
            "name": "StructureParser",
            "docstring": "Parser for analyzing Python project structure.",
            "methods": [
              {
                "name": "__init__",
                "signature": "def __init__(self)",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 33,
                "file_path": "/workspaces/SYSC4918/src/parser/structure_parser.py",
                "parameters": [
                  {
                    "name": "self"
                  }
                ],
                "complexity_score": 1
              },
              {
                "name": "parse",
                "signature": "def parse(self, project_path: Path, project_files: Dict[str, List[FileInfo]]) -> ProjectStructure",
                "docstring": "Parse project structure from project directory.\n\nArgs:\n    project_path: Path to project root\n    project_files: Dictionary of categorized project files\n    \nReturns:\n    ProjectStructure object with ...",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 65,
                "file_path": "/workspaces/SYSC4918/src/parser/structure_parser.py",
                "return_type": "ProjectStructure",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  },
                  {
                    "name": "project_files",
                    "type": "Dict[str, List[FileInfo]]"
                  }
                ],
                "complexity_score": 2
              },
              {
                "name": "_detect_src_layout",
                "signature": "def _detect_src_layout(self, project_path: Path) -> bool",
                "docstring": "Detect if project uses src/ layout.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 110,
                "file_path": "/workspaces/SYSC4918/src/parser/structure_parser.py",
                "return_type": "bool",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  }
                ],
                "complexity_score": 2
              },
              {
                "name": "_find_main_package",
                "signature": "def _find_main_package(self, project_path: Path, project_files: Dict[str, List[FileInfo]]) -> Optional[str]",
                "docstring": "Find the main package of the project.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 115,
                "file_path": "/workspaces/SYSC4918/src/parser/structure_parser.py",
                "return_type": "Optional[str]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  },
                  {
                    "name": "project_files",
                    "type": "Dict[str, List[FileInfo]]"
                  }
                ],
                "complexity_score": 11
              },
              {
                "name": "_discover_packages",
                "signature": "def _discover_packages(self, project_path: Path, project_files: Dict[str, List[FileInfo]]) -> List[str]",
                "docstring": "Discover all Python packages in the project.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 143,
                "file_path": "/workspaces/SYSC4918/src/parser/structure_parser.py",
                "return_type": "List[str]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  },
                  {
                    "name": "project_files",
                    "type": "Dict[str, List[FileInfo]]"
                  }
                ],
                "complexity_score": 4
              },
              {
                "name": "_create_module_info_list",
                "signature": "def _create_module_info_list(self, project_files: Dict[str, List[FileInfo]]) -> List[ModuleInfo]",
                "docstring": "Create ModuleInfo objects for Python files.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 166,
                "file_path": "/workspaces/SYSC4918/src/parser/structure_parser.py",
                "return_type": "List[ModuleInfo]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_files",
                    "type": "Dict[str, List[FileInfo]]"
                  }
                ],
                "complexity_score": 3
              },
              {
                "name": "_find_entry_points",
                "signature": "def _find_entry_points(self, project_path: Path, project_files: Dict[str, List[FileInfo]]) -> List[EntryPoint]",
                "docstring": "Find project entry points.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 187,
                "file_path": "/workspaces/SYSC4918/src/parser/structure_parser.py",
                "return_type": "List[EntryPoint]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  },
                  {
                    "name": "project_files",
                    "type": "Dict[str, List[FileInfo]]"
                  }
                ],
                "complexity_score": 5
              },
              {
                "name": "_extract_console_scripts_from_setup_py",
                "signature": "def _extract_console_scripts_from_setup_py(self, setup_py: Path) -> List[EntryPoint]",
                "docstring": "Extract console scripts from setup.py.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 218,
                "file_path": "/workspaces/SYSC4918/src/parser/structure_parser.py",
                "return_type": "List[EntryPoint]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "setup_py",
                    "type": "Path"
                  }
                ],
                "complexity_score": 6
              },
              {
                "name": "_extract_scripts_from_pyproject_toml",
                "signature": "def _extract_scripts_from_pyproject_toml(self, pyproject_toml: Path) -> List[EntryPoint]",
                "docstring": "Extract scripts from pyproject.toml.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 256,
                "file_path": "/workspaces/SYSC4918/src/parser/structure_parser.py",
                "return_type": "List[EntryPoint]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "pyproject_toml",
                    "type": "Path"
                  }
                ],
                "complexity_score": 13
              },
              {
                "name": "_find_config_files",
                "signature": "def _find_config_files(self, project_path: Path) -> List[str]",
                "docstring": "Find configuration files in the project.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 303,
                "file_path": "/workspaces/SYSC4918/src/parser/structure_parser.py",
                "return_type": "List[str]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  }
                ],
                "complexity_score": 6
              },
              {
                "name": "_find_data_directories",
                "signature": "def _find_data_directories(self, project_path: Path) -> List[str]",
                "docstring": "Find data directories in the project.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 331,
                "file_path": "/workspaces/SYSC4918/src/parser/structure_parser.py",
                "return_type": "List[str]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  }
                ],
                "complexity_score": 4
              },
              {
                "name": "_find_test_directories",
                "signature": "def _find_test_directories(self, project_path: Path) -> List[str]",
                "docstring": "Find test directories in the project.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 344,
                "file_path": "/workspaces/SYSC4918/src/parser/structure_parser.py",
                "return_type": "List[str]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  }
                ],
                "complexity_score": 4
              },
              {
                "name": "_find_doc_directories",
                "signature": "def _find_doc_directories(self, project_path: Path) -> List[str]",
                "docstring": "Find documentation directories in the project.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 357,
                "file_path": "/workspaces/SYSC4918/src/parser/structure_parser.py",
                "return_type": "List[str]",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  }
                ],
                "complexity_score": 4
              },
              {
                "name": "_path_to_module_name",
                "signature": "def _path_to_module_name(self, file_path: Path, project_path: Path) -> str",
                "docstring": "Convert file path to module name.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 370,
                "file_path": "/workspaces/SYSC4918/src/parser/structure_parser.py",
                "return_type": "str",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "file_path",
                    "type": "Path"
                  },
                  {
                    "name": "project_path",
                    "type": "Path"
                  }
                ],
                "complexity_score": 4
              },
              {
                "name": "_calculate_total_lines",
                "signature": "def _calculate_total_lines(self, project_files: Dict[str, List[FileInfo]]) -> int",
                "docstring": "Calculate total lines of code in the project.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 392,
                "file_path": "/workspaces/SYSC4918/src/parser/structure_parser.py",
                "return_type": "int",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "project_files",
                    "type": "Dict[str, List[FileInfo]]"
                  }
                ],
                "complexity_score": 2
              },
              {
                "name": "_count_lines_in_file",
                "signature": "def _count_lines_in_file(self, file_path: str) -> int",
                "docstring": "Count lines in a file.",
                "is_public": false,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 401,
                "file_path": "/workspaces/SYSC4918/src/parser/structure_parser.py",
                "return_type": "int",
                "parameters": [
                  {
                    "name": "self"
                  },
                  {
                    "name": "file_path",
                    "type": "str"
                  }
                ],
                "complexity_score": 3
              }
            ],
            "is_abstract": false,
            "is_dataclass": false,
            "is_enum": false,
            "line_number": 30,
            "file_path": "/workspaces/SYSC4918/src/parser/structure_parser.py"
          }
        ],
        "functions": [
          {
            "name": "analyze_project_structure",
            "signature": "def analyze_project_structure(project_path: str, project_files: Dict[str, List[FileInfo]]) -> ProjectStructure",
            "docstring": "Analyze the structure of a Python project.\n\nArgs:\n    project_path: Path to project root\n    project_files: Dictionary of categorized project files\n    \nReturns:\n    ProjectStructure object",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 413,
            "file_path": "/workspaces/SYSC4918/src/parser/structure_parser.py",
            "return_type": "ProjectStructure",
            "parameters": [
              {
                "name": "project_path",
                "type": "str"
              },
              {
                "name": "project_files",
                "type": "Dict[str, List[FileInfo]]"
              }
            ],
            "complexity_score": 1
          },
          {
            "name": "find_entry_points",
            "signature": "def find_entry_points(project_path: str) -> List[EntryPoint]",
            "docstring": "Find entry points in a Python project.\n\nArgs:\n    project_path: Path to project root\n    \nReturns:\n    List of EntryPoint objects",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 428,
            "file_path": "/workspaces/SYSC4918/src/parser/structure_parser.py",
            "return_type": "List[EntryPoint]",
            "parameters": [
              {
                "name": "project_path",
                "type": "str"
              }
            ],
            "complexity_score": 1
          },
          {
            "name": "categorize_directories",
            "signature": "def categorize_directories(project_path: str) -> Dict[str, List[str]]",
            "docstring": "Categorize directories in a Python project.\n\nArgs:\n    project_path: Path to project root\n    \nReturns:\n    Dictionary mapping categories to directory lists",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 447,
            "file_path": "/workspaces/SYSC4918/src/parser/structure_parser.py",
            "return_type": "Dict[str, List[str]]",
            "parameters": [
              {
                "name": "project_path",
                "type": "str"
              }
            ],
            "complexity_score": 1
          }
        ],
        "imports": [
          "os",
          "re",
          "from pathlib import Path",
          "from typing import Dict",
          "from typing import List",
          "from typing import Any",
          "from typing import Optional",
          "from typing import Set",
          "from typing import Tuple",
          "configparser",
          "logging",
          "from models.project_data import ProjectStructure",
          "from models.project_data import ModuleInfo",
          "from models.project_data import EntryPoint",
          "from utils.file_utils import read_file_safely",
          "from utils.file_utils import is_python_file",
          "from utils.file_utils import FileInfo",
          "tomllib",
          "tomllib"
        ],
        "is_package": false,
        "is_main": false,
        "line_count": 465
      },
      {
        "name": "__init__",
        "file_path": "/workspaces/SYSC4918/src/models/__init__.py",
        "is_package": true,
        "is_main": false,
        "line_count": 0
      },
      {
        "name": "project_data",
        "file_path": "/workspaces/SYSC4918/src/models/project_data.py",
        "docstring": "Data classes representing parsed project information for README generation.\n\nThis module contains all the data structures used to store and organize\ninformation extracted from Python projects during the parsing process.",
        "classes": [
          {
            "name": "ProjectType",
            "docstring": "Enumeration of common Python project types.",
            "inheritance": [
              "Enum"
            ],
            "is_abstract": false,
            "is_dataclass": false,
            "is_enum": true,
            "line_number": 14,
            "file_path": "/workspaces/SYSC4918/src/models/project_data.py",
            "attributes": [
              {
                "name": "LIBRARY"
              },
              {
                "name": "APPLICATION"
              },
              {
                "name": "CLI_TOOL"
              },
              {
                "name": "WEB_APPLICATION"
              },
              {
                "name": "API"
              },
              {
                "name": "PACKAGE"
              },
              {
                "name": "UNKNOWN"
              }
            ]
          },
          {
            "name": "LicenseType",
            "docstring": "Enumeration of common license types.",
            "inheritance": [
              "Enum"
            ],
            "is_abstract": false,
            "is_dataclass": false,
            "is_enum": true,
            "line_number": 25,
            "file_path": "/workspaces/SYSC4918/src/models/project_data.py",
            "attributes": [
              {
                "name": "MIT"
              },
              {
                "name": "GPL_V3"
              },
              {
                "name": "APACHE_2"
              },
              {
                "name": "BSD_3"
              },
              {
                "name": "UNLICENSE"
              },
              {
                "name": "PROPRIETARY"
              },
              {
                "name": "UNKNOWN"
              }
            ]
          },
          {
            "name": "ProjectMetadata",
            "docstring": "Core project metadata extracted from setup files and git.",
            "decorators": [
              "@dataclass"
            ],
            "is_abstract": false,
            "is_dataclass": true,
            "is_enum": false,
            "line_number": 37,
            "file_path": "/workspaces/SYSC4918/src/models/project_data.py",
            "attributes": [
              {
                "name": "project_name",
                "type": "str"
              },
              {
                "name": "description",
                "type": "Optional[str]"
              },
              {
                "name": "version",
                "type": "Optional[str]"
              },
              {
                "name": "author",
                "type": "Optional[str]"
              },
              {
                "name": "author_email",
                "type": "Optional[str]"
              },
              {
                "name": "license",
                "type": "Optional[LicenseType]"
              },
              {
                "name": "homepage",
                "type": "Optional[str]"
              },
              {
                "name": "repository",
                "type": "Optional[str]"
              },
              {
                "name": "python_version",
                "type": "Optional[str]"
              },
              {
                "name": "project_type",
                "type": "ProjectType"
              },
              {
                "name": "keywords",
                "type": "List[str]"
              },
              {
                "name": "classifiers",
                "type": "List[str]"
              }
            ]
          },
          {
            "name": "DependencyInfo",
            "docstring": "Information about project dependencies and requirements.",
            "methods": [
              {
                "name": "get_all_dependencies",
                "signature": "def get_all_dependencies(self) -> List[str]",
                "docstring": "Get all dependencies combined.",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 64,
                "file_path": "/workspaces/SYSC4918/src/models/project_data.py",
                "return_type": "List[str]",
                "parameters": [
                  {
                    "name": "self"
                  }
                ],
                "complexity_score": 3
              }
            ],
            "decorators": [
              "@dataclass"
            ],
            "is_abstract": false,
            "is_dataclass": true,
            "is_enum": false,
            "line_number": 55,
            "file_path": "/workspaces/SYSC4918/src/models/project_data.py",
            "attributes": [
              {
                "name": "production",
                "type": "List[str]"
              },
              {
                "name": "development",
                "type": "List[str]"
              },
              {
                "name": "optional",
                "type": "Dict[str, List[str]]"
              },
              {
                "name": "python_requires",
                "type": "Optional[str]"
              },
              {
                "name": "extras_require",
                "type": "Dict[str, List[str]]"
              }
            ]
          },
          {
            "name": "FunctionInfo",
            "docstring": "Information about a function or method.",
            "decorators": [
              "@dataclass"
            ],
            "is_abstract": false,
            "is_dataclass": true,
            "is_enum": false,
            "line_number": 75,
            "file_path": "/workspaces/SYSC4918/src/models/project_data.py",
            "attributes": [
              {
                "name": "name",
                "type": "str"
              },
              {
                "name": "signature",
                "type": "str"
              },
              {
                "name": "docstring",
                "type": "Optional[str]"
              },
              {
                "name": "is_public",
                "type": "bool"
              },
              {
                "name": "is_async",
                "type": "bool"
              },
              {
                "name": "is_property",
                "type": "bool"
              },
              {
                "name": "is_classmethod",
                "type": "bool"
              },
              {
                "name": "is_staticmethod",
                "type": "bool"
              },
              {
                "name": "decorators",
                "type": "List[str]"
              },
              {
                "name": "line_number",
                "type": "Optional[int]"
              },
              {
                "name": "file_path",
                "type": "Optional[str]"
              },
              {
                "name": "return_type",
                "type": "Optional[str]"
              },
              {
                "name": "parameters",
                "type": "List[Dict[str, Any]]"
              },
              {
                "name": "complexity_score",
                "type": "Optional[int]"
              }
            ]
          },
          {
            "name": "ClassInfo",
            "docstring": "Information about a class.",
            "methods": [
              {
                "name": "get_public_methods",
                "signature": "def get_public_methods(self) -> List[FunctionInfo]",
                "docstring": "Get only public methods.",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 111,
                "file_path": "/workspaces/SYSC4918/src/models/project_data.py",
                "return_type": "List[FunctionInfo]",
                "parameters": [
                  {
                    "name": "self"
                  }
                ],
                "complexity_score": 1
              },
              {
                "name": "get_public_properties",
                "signature": "def get_public_properties(self) -> List[FunctionInfo]",
                "docstring": "Get only public properties.",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 115,
                "file_path": "/workspaces/SYSC4918/src/models/project_data.py",
                "return_type": "List[FunctionInfo]",
                "parameters": [
                  {
                    "name": "self"
                  }
                ],
                "complexity_score": 1
              }
            ],
            "decorators": [
              "@dataclass"
            ],
            "is_abstract": false,
            "is_dataclass": true,
            "is_enum": false,
            "line_number": 95,
            "file_path": "/workspaces/SYSC4918/src/models/project_data.py",
            "attributes": [
              {
                "name": "name",
                "type": "str"
              },
              {
                "name": "docstring",
                "type": "Optional[str]"
              },
              {
                "name": "methods",
                "type": "List[FunctionInfo]"
              },
              {
                "name": "properties",
                "type": "List[FunctionInfo]"
              },
              {
                "name": "inheritance",
                "type": "List[str]"
              },
              {
                "name": "decorators",
                "type": "List[str]"
              },
              {
                "name": "is_abstract",
                "type": "bool"
              },
              {
                "name": "is_dataclass",
                "type": "bool"
              },
              {
                "name": "is_enum",
                "type": "bool"
              },
              {
                "name": "line_number",
                "type": "Optional[int]"
              },
              {
                "name": "file_path",
                "type": "Optional[str]"
              },
              {
                "name": "attributes",
                "type": "List[Dict[str, Any]]"
              }
            ]
          },
          {
            "name": "ModuleInfo",
            "docstring": "Information about a Python module.",
            "decorators": [
              "@dataclass"
            ],
            "is_abstract": false,
            "is_dataclass": true,
            "is_enum": false,
            "line_number": 121,
            "file_path": "/workspaces/SYSC4918/src/models/project_data.py",
            "attributes": [
              {
                "name": "name",
                "type": "str"
              },
              {
                "name": "file_path",
                "type": "str"
              },
              {
                "name": "docstring",
                "type": "Optional[str]"
              },
              {
                "name": "classes",
                "type": "List[ClassInfo]"
              },
              {
                "name": "functions",
                "type": "List[FunctionInfo]"
              },
              {
                "name": "constants",
                "type": "List[Dict[str, Any]]"
              },
              {
                "name": "imports",
                "type": "List[str]"
              },
              {
                "name": "is_package",
                "type": "bool"
              },
              {
                "name": "is_main",
                "type": "bool"
              },
              {
                "name": "line_count",
                "type": "int"
              }
            ]
          },
          {
            "name": "EntryPoint",
            "docstring": "Information about project entry points.",
            "decorators": [
              "@dataclass"
            ],
            "is_abstract": false,
            "is_dataclass": true,
            "is_enum": false,
            "line_number": 137,
            "file_path": "/workspaces/SYSC4918/src/models/project_data.py",
            "attributes": [
              {
                "name": "name",
                "type": "str"
              },
              {
                "name": "module",
                "type": "str"
              },
              {
                "name": "function",
                "type": "Optional[str]"
              },
              {
                "name": "script_path",
                "type": "Optional[str]"
              },
              {
                "name": "description",
                "type": "Optional[str]"
              }
            ]
          },
          {
            "name": "ProjectStructure",
            "docstring": "Information about the overall project structure.",
            "methods": [
              {
                "name": "get_main_modules",
                "signature": "def get_main_modules(self) -> List[ModuleInfo]",
                "docstring": "Get modules that are likely entry points.",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 164,
                "file_path": "/workspaces/SYSC4918/src/models/project_data.py",
                "return_type": "List[ModuleInfo]",
                "parameters": [
                  {
                    "name": "self"
                  }
                ],
                "complexity_score": 1
              }
            ],
            "decorators": [
              "@dataclass"
            ],
            "is_abstract": false,
            "is_dataclass": true,
            "is_enum": false,
            "line_number": 148,
            "file_path": "/workspaces/SYSC4918/src/models/project_data.py",
            "attributes": [
              {
                "name": "root_path",
                "type": "str"
              },
              {
                "name": "main_package",
                "type": "Optional[str]"
              },
              {
                "name": "src_layout",
                "type": "bool"
              },
              {
                "name": "packages",
                "type": "List[str]"
              },
              {
                "name": "modules",
                "type": "List[ModuleInfo]"
              },
              {
                "name": "entry_points",
                "type": "List[EntryPoint]"
              },
              {
                "name": "config_files",
                "type": "List[str]"
              },
              {
                "name": "data_directories",
                "type": "List[str]"
              },
              {
                "name": "test_directories",
                "type": "List[str]"
              },
              {
                "name": "doc_directories",
                "type": "List[str]"
              },
              {
                "name": "total_files",
                "type": "int"
              },
              {
                "name": "total_lines",
                "type": "int"
              }
            ]
          },
          {
            "name": "CodeExample",
            "docstring": "A code example extracted from the project.",
            "decorators": [
              "@dataclass"
            ],
            "is_abstract": false,
            "is_dataclass": true,
            "is_enum": false,
            "line_number": 170,
            "file_path": "/workspaces/SYSC4918/src/models/project_data.py",
            "attributes": [
              {
                "name": "title",
                "type": "str"
              },
              {
                "name": "code",
                "type": "str"
              },
              {
                "name": "description",
                "type": "Optional[str]"
              },
              {
                "name": "file_path",
                "type": "Optional[str]"
              },
              {
                "name": "line_number",
                "type": "Optional[int]"
              },
              {
                "name": "example_type",
                "type": "str"
              },
              {
                "name": "language",
                "type": "str"
              },
              {
                "name": "is_executable",
                "type": "bool"
              },
              {
                "name": "expected_output",
                "type": "Optional[str]"
              }
            ]
          },
          {
            "name": "ConfigurationInfo",
            "docstring": "Information about project configuration.",
            "decorators": [
              "@dataclass"
            ],
            "is_abstract": false,
            "is_dataclass": true,
            "is_enum": false,
            "line_number": 185,
            "file_path": "/workspaces/SYSC4918/src/models/project_data.py",
            "attributes": [
              {
                "name": "config_files",
                "type": "List[str]"
              },
              {
                "name": "environment_variables",
                "type": "List[Dict[str, str]]"
              },
              {
                "name": "default_settings",
                "type": "Dict[str, Any]"
              },
              {
                "name": "config_examples",
                "type": "List[CodeExample]"
              }
            ]
          },
          {
            "name": "TestInfo",
            "docstring": "Information about project tests.",
            "decorators": [
              "@dataclass"
            ],
            "is_abstract": false,
            "is_dataclass": true,
            "is_enum": false,
            "line_number": 195,
            "file_path": "/workspaces/SYSC4918/src/models/project_data.py",
            "attributes": [
              {
                "name": "test_directories",
                "type": "List[str]"
              },
              {
                "name": "test_files",
                "type": "List[str]"
              },
              {
                "name": "test_framework",
                "type": "Optional[str]"
              },
              {
                "name": "coverage_files",
                "type": "List[str]"
              },
              {
                "name": "total_tests",
                "type": "int"
              }
            ]
          },
          {
            "name": "DocumentationInfo",
            "docstring": "Information about project documentation.",
            "decorators": [
              "@dataclass"
            ],
            "is_abstract": false,
            "is_dataclass": true,
            "is_enum": false,
            "line_number": 206,
            "file_path": "/workspaces/SYSC4918/src/models/project_data.py",
            "attributes": [
              {
                "name": "readme_file",
                "type": "Optional[str]"
              },
              {
                "name": "changelog_file",
                "type": "Optional[str]"
              },
              {
                "name": "license_file",
                "type": "Optional[str]"
              },
              {
                "name": "doc_directories",
                "type": "List[str]"
              },
              {
                "name": "doc_files",
                "type": "List[str]"
              },
              {
                "name": "has_sphinx",
                "type": "bool"
              },
              {
                "name": "has_mkdocs",
                "type": "bool"
              }
            ]
          },
          {
            "name": "ProjectData",
            "docstring": "Complete parsed project information.",
            "methods": [
              {
                "name": "get_api_documentation",
                "signature": "def get_api_documentation(self) -> Dict[str, Any]",
                "docstring": "Get formatted API documentation.",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 233,
                "file_path": "/workspaces/SYSC4918/src/models/project_data.py",
                "return_type": "Dict[str, Any]",
                "parameters": [
                  {
                    "name": "self"
                  }
                ],
                "complexity_score": 3
              },
              {
                "name": "get_summary_stats",
                "signature": "def get_summary_stats(self) -> Dict[str, Any]",
                "docstring": "Get summary statistics about the project.",
                "is_public": true,
                "is_async": false,
                "is_property": false,
                "is_classmethod": false,
                "is_staticmethod": false,
                "line_number": 270,
                "file_path": "/workspaces/SYSC4918/src/models/project_data.py",
                "return_type": "Dict[str, Any]",
                "parameters": [
                  {
                    "name": "self"
                  }
                ],
                "complexity_score": 1
              }
            ],
            "decorators": [
              "@dataclass"
            ],
            "is_abstract": false,
            "is_dataclass": true,
            "is_enum": false,
            "line_number": 219,
            "file_path": "/workspaces/SYSC4918/src/models/project_data.py",
            "attributes": [
              {
                "name": "metadata",
                "type": "ProjectMetadata"
              },
              {
                "name": "dependencies",
                "type": "DependencyInfo"
              },
              {
                "name": "structure",
                "type": "ProjectStructure"
              },
              {
                "name": "configuration",
                "type": "ConfigurationInfo"
              },
              {
                "name": "examples",
                "type": "List[CodeExample]"
              },
              {
                "name": "tests",
                "type": "Optional[TestInfo]"
              },
              {
                "name": "documentation",
                "type": "Optional[DocumentationInfo]"
              },
              {
                "name": "parsing_errors",
                "type": "List[str]"
              },
              {
                "name": "token_count",
                "type": "int"
              },
              {
                "name": "parsing_timestamp",
                "type": "Optional[str]"
              }
            ]
          }
        ],
        "imports": [
          "from dataclasses import dataclass",
          "from dataclasses import field",
          "from typing import List",
          "from typing import Dict",
          "from typing import Optional",
          "from typing import Any",
          "from typing import Union",
          "from enum import Enum",
          "from pathlib import Path"
        ],
        "is_package": false,
        "is_main": false,
        "line_count": 293
      },
      {
        "name": "schemas",
        "file_path": "/workspaces/SYSC4918/src/models/schemas.py",
        "docstring": "JSON schema definitions for project data validation and documentation.\n\nThis module provides schema definitions that correspond to the data classes\nin project_data.py, enabling validation and documentation of the JSON output.",
        "functions": [
          {
            "name": "validate_project_data",
            "signature": "def validate_project_data(data: Dict[str, Any]) -> Dict[str, Any]",
            "docstring": "Validate project data against the schema.\n\nArgs:\n    data: The project data to validate\n    \nReturns:\n    Dict containing validation results",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 378,
            "file_path": "/workspaces/SYSC4918/src/models/schemas.py",
            "return_type": "Dict[str, Any]",
            "parameters": [
              {
                "name": "data",
                "type": "Dict[str, Any]"
              }
            ],
            "complexity_score": 4
          },
          {
            "name": "get_schema_version",
            "signature": "def get_schema_version() -> str",
            "docstring": "Get the current schema version.",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 400,
            "file_path": "/workspaces/SYSC4918/src/models/schemas.py",
            "return_type": "str",
            "complexity_score": 1
          },
          {
            "name": "get_schema_documentation",
            "signature": "def get_schema_documentation() -> Dict[str, Any]",
            "docstring": "Get human-readable documentation for the schema.",
            "is_public": true,
            "is_async": false,
            "is_property": false,
            "is_classmethod": false,
            "is_staticmethod": false,
            "line_number": 405,
            "file_path": "/workspaces/SYSC4918/src/models/schemas.py",
            "return_type": "Dict[str, Any]",
            "complexity_score": 1
          }
        ],
        "constants": [
          {
            "name": "FUNCTION_SCHEMA",
            "value": "{'type': 'object', 'properties': {'name': {'type': 'string'}, 'signature': {'type': 'string'}, 'docstring': {'type': ['string', 'null']}, 'is_public': {'type': 'boolean'}, 'is_async': {'type': 'boolean'}, 'is_property': {'type': 'boolean'}, 'is_classmethod': {'type': 'boolean'}, 'is_staticmethod': {'type': 'boolean'}, 'decorators': {'type': 'array', 'items': {'type': 'string'}}, 'line_number': {'type': ['integer', 'null']}, 'file_path': {'type': ['string', 'null']}, 'return_type': {'type': ['string', 'null']}, 'parameters': {'type': 'array', 'items': {'type': 'object', 'properties': {'name': {'type': 'string'}, 'type': {'type': ['string', 'null']}, 'default': {'type': ['string', 'null']}, 'description': {'type': ['string', 'null']}}, 'required': ['name']}}, 'complexity_score': {'type': ['integer', 'null']}}, 'required': ['name', 'signature']}",
            "type": "dict",
            "line_number": 11
          },
          {
            "name": "CLASS_SCHEMA",
            "value": "{'type': 'object', 'properties': {'name': {'type': 'string'}, 'docstring': {'type': ['string', 'null']}, 'methods': {'type': 'array', 'items': FUNCTION_SCHEMA}, 'properties': {'type': 'array', 'items': FUNCTION_SCHEMA}, 'inheritance': {'type': 'array', 'items': {'type': 'string'}}, 'decorators': {'type': 'array', 'items': {'type': 'string'}}, 'is_abstract': {'type': 'boolean'}, 'is_dataclass': {'type': 'boolean'}, 'is_enum': {'type': 'boolean'}, 'line_number': {'type': ['integer', 'null']}, 'file_path': {'type': ['string', 'null']}, 'attributes': {'type': 'array', 'items': {'type': 'object', 'properties': {'name': {'type': 'string'}, 'type': {'type': ['string', 'null']}, 'description': {'type': ['string', 'null']}}, 'required': ['name']}}}, 'required': ['name']}",
            "type": "dict",
            "line_number": 48
          },
          {
            "name": "MODULE_SCHEMA",
            "value": "{'type': 'object', 'properties': {'name': {'type': 'string'}, 'file_path': {'type': 'string'}, 'docstring': {'type': ['string', 'null']}, 'classes': {'type': 'array', 'items': CLASS_SCHEMA}, 'functions': {'type': 'array', 'items': FUNCTION_SCHEMA}, 'constants': {'type': 'array', 'items': {'type': 'object', 'properties': {'name': {'type': 'string'}, 'value': {'type': ['string', 'number', 'boolean', 'null']}, 'type': {'type': ['string', 'null']}, 'description': {'type': ['string', 'null']}}, 'required': ['name']}}, 'imports': {'type': 'array', 'items': {'type': 'string'}}, 'is_package': {'type': 'boolean'}, 'is_main': {'type': 'boolean'}, 'line_count': {'type': 'integer'}}, 'required': ['name', 'file_path']}",
            "type": "dict",
            "line_number": 91
          },
          {
            "name": "METADATA_SCHEMA",
            "value": "{'type': 'object', 'properties': {'project_name': {'type': 'string'}, 'description': {'type': ['string', 'null']}, 'version': {'type': ['string', 'null']}, 'author': {'type': ['string', 'null']}, 'author_email': {'type': ['string', 'null']}, 'license': {'type': ['string', 'null'], 'enum': ['MIT', 'GPL-3.0', 'Apache-2.0', 'BSD-3-Clause', 'Unlicense', 'Proprietary', 'Unknown', None]}, 'homepage': {'type': ['string', 'null']}, 'repository': {'type': ['string', 'null']}, 'python_version': {'type': ['string', 'null']}, 'project_type': {'type': 'string', 'enum': ['library', 'application', 'cli_tool', 'web_application', 'api', 'package', 'unknown']}, 'keywords': {'type': 'array', 'items': {'type': 'string'}}, 'classifiers': {'type': 'array', 'items': {'type': 'string'}}}, 'required': ['project_name']}",
            "type": "dict",
            "line_number": 130
          },
          {
            "name": "DEPENDENCIES_SCHEMA",
            "value": "{'type': 'object', 'properties': {'production': {'type': 'array', 'items': {'type': 'string'}}, 'development': {'type': 'array', 'items': {'type': 'string'}}, 'optional': {'type': 'object', 'patternProperties': {'.*': {'type': 'array', 'items': {'type': 'string'}}}}, 'python_requires': {'type': ['string', 'null']}, 'extras_require': {'type': 'object', 'patternProperties': {'.*': {'type': 'array', 'items': {'type': 'string'}}}}}, 'required': ['production', 'development']}",
            "type": "dict",
            "line_number": 162
          },
          {
            "name": "ENTRY_POINT_SCHEMA",
            "value": "{'type': 'object', 'properties': {'name': {'type': 'string'}, 'module': {'type': 'string'}, 'function': {'type': ['string', 'null']}, 'script_path': {'type': ['string', 'null']}, 'description': {'type': ['string', 'null']}}, 'required': ['name', 'module']}",
            "type": "dict",
            "line_number": 197
          },
          {
            "name": "STRUCTURE_SCHEMA",
            "value": "{'type': 'object', 'properties': {'root_path': {'type': 'string'}, 'main_package': {'type': ['string', 'null']}, 'src_layout': {'type': 'boolean'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'modules': {'type': 'array', 'items': MODULE_SCHEMA}, 'entry_points': {'type': 'array', 'items': ENTRY_POINT_SCHEMA}, 'config_files': {'type': 'array', 'items': {'type': 'string'}}, 'data_directories': {'type': 'array', 'items': {'type': 'string'}}, 'test_directories': {'type': 'array', 'items': {'type': 'string'}}, 'doc_directories': {'type': 'array', 'items': {'type': 'string'}}, 'total_files': {'type': 'integer'}, 'total_lines': {'type': 'integer'}}, 'required': ['root_path', 'total_files', 'total_lines']}",
            "type": "dict",
            "line_number": 210
          },
          {
            "name": "CODE_EXAMPLE_SCHEMA",
            "value": "{'type': 'object', 'properties': {'title': {'type': 'string'}, 'code': {'type': 'string'}, 'description': {'type': ['string', 'null']}, 'file_path': {'type': ['string', 'null']}, 'line_number': {'type': ['integer', 'null']}, 'example_type': {'type': 'string'}, 'language': {'type': 'string'}, 'is_executable': {'type': 'boolean'}, 'expected_output': {'type': ['string', 'null']}}, 'required': ['title', 'code']}",
            "type": "dict",
            "line_number": 251
          },
          {
            "name": "CONFIGURATION_SCHEMA",
            "value": "{'type': 'object', 'properties': {'config_files': {'type': 'array', 'items': {'type': 'string'}}, 'environment_variables': {'type': 'array', 'items': {'type': 'object', 'properties': {'name': {'type': 'string'}, 'description': {'type': ['string', 'null']}, 'default': {'type': ['string', 'null']}, 'required': {'type': 'boolean'}}, 'required': ['name']}}, 'default_settings': {'type': 'object', 'patternProperties': {'.*': {}}}, 'config_examples': {'type': 'array', 'items': CODE_EXAMPLE_SCHEMA}}}",
            "type": "dict",
            "line_number": 268
          },
          {
            "name": "TEST_INFO_SCHEMA",
            "value": "{'type': 'object', 'properties': {'test_directories': {'type': 'array', 'items': {'type': 'string'}}, 'test_files': {'type': 'array', 'items': {'type': 'string'}}, 'test_framework': {'type': ['string', 'null']}, 'coverage_files': {'type': 'array', 'items': {'type': 'string'}}, 'total_tests': {'type': 'integer'}}}",
            "type": "dict",
            "line_number": 302
          },
          {
            "name": "DOCUMENTATION_INFO_SCHEMA",
            "value": "{'type': 'object', 'properties': {'readme_file': {'type': ['string', 'null']}, 'changelog_file': {'type': ['string', 'null']}, 'license_file': {'type': ['string', 'null']}, 'doc_directories': {'type': 'array', 'items': {'type': 'string'}}, 'doc_files': {'type': 'array', 'items': {'type': 'string'}}, 'has_sphinx': {'type': 'boolean'}, 'has_mkdocs': {'type': 'boolean'}}}",
            "type": "dict",
            "line_number": 323
          },
          {
            "name": "PROJECT_DATA_SCHEMA",
            "value": "{'$schema': 'http://json-schema.org/draft-07/schema#', 'type': 'object', 'properties': {'metadata': METADATA_SCHEMA, 'dependencies': DEPENDENCIES_SCHEMA, 'structure': STRUCTURE_SCHEMA, 'configuration': CONFIGURATION_SCHEMA, 'examples': {'type': 'array', 'items': CODE_EXAMPLE_SCHEMA}, 'tests': {'oneOf': [{'type': 'null'}, TEST_INFO_SCHEMA]}, 'documentation': {'oneOf': [{'type': 'null'}, DOCUMENTATION_INFO_SCHEMA]}, 'parsing_errors': {'type': 'array', 'items': {'type': 'string'}}, 'token_count': {'type': 'integer'}, 'parsing_timestamp': {'type': ['string', 'null']}}, 'required': ['metadata', 'dependencies', 'structure', 'configuration']}",
            "type": "dict",
            "line_number": 343
          }
        ],
        "imports": [
          "from typing import Dict",
          "from typing import Any"
        ],
        "is_package": false,
        "is_main": false,
        "line_count": 447
      }
    ],
    "entry_points": [
      {
        "name": "cli",
        "module": "cli",
        "script_path": "/workspaces/SYSC4918/src/cli.py",
        "description": "Entry point: cli.py"
      },
      {
        "name": "__main__",
        "module": "__main__",
        "script_path": "/workspaces/SYSC4918/src/__main__.py",
        "description": "Entry point: __main__.py"
      }
    ],
    "config_files": [
      "/workspaces/SYSC4918/src/project_data.json",
      "/workspaces/SYSC4918/src/src_parsed_data.json"
    ],
    "total_files": 21,
    "total_lines": 7360
  },
  "configuration": {},
  "examples": [
    {
      "title": "Main block example from cli.py",
      "code": "main()",
      "description": "Example usage from main block",
      "file_path": "/workspaces/SYSC4918/src/cli.py",
      "line_number": 656,
      "example_type": "main_block",
      "language": "python",
      "is_executable": true
    },
    {
      "title": "Main block example from __main__.py",
      "code": "current_dir = Path(__file__).parent\nsys.path.insert(0, str(current_dir.parent))",
      "description": "Example usage from main block",
      "file_path": "/workspaces/SYSC4918/src/__main__.py",
      "line_number": 15,
      "example_type": "main_block",
      "language": "python",
      "is_executable": true
    },
    {
      "title": "Main block example from __main__.py",
      "code": "try:\n    from readme_generator import get_version\nexcept ImportError:\n\n    def get_version():\n        return '0.1.0'\nentry_point()",
      "description": "Example usage from main block",
      "file_path": "/workspaces/SYSC4918/src/__main__.py",
      "line_number": 103,
      "example_type": "main_block",
      "language": "python",
      "is_executable": true
    },
    {
      "title": "Example function: _serialize_examples",
      "code": "'Serialize examples list.'\nreturn [self._serialize_example(example) for example in examples]",
      "description": "Usage example from function _serialize_examples",
      "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py",
      "line_number": 226,
      "example_type": "example_function",
      "language": "python",
      "is_executable": true
    },
    {
      "title": "Example function: _serialize_example",
      "code": "'Serialize a single example.'\nreturn {'title': example.title, 'code': example.code, 'description': example.description, 'file_path': example.file_path, 'line_number': example.line_number, 'example_type': example.example_type, 'language': example.language, 'is_executable': example.is_executable, 'expected_output': example.expected_output}",
      "description": "Usage example from function _serialize_example",
      "file_path": "/workspaces/SYSC4918/src/utils/json_serializer.py",
      "line_number": 230,
      "example_type": "example_function",
      "language": "python",
      "is_executable": true
    },
    {
      "title": "Example function: _score_example",
      "code": "'Calculate priority score for an example.'\nbase_score = self.base_priorities['has_examples']\nreasons = ['code_example']\nmultiplier = 1.0\nif hasattr(example, 'example_type') and example.example_type == 'basic_usage':\n    multiplier *= 1.3\n    reasons.append('basic_usage')\nif hasattr(example, 'is_executable') and example.is_executable:\n    multiplier *= 1.1\n    reasons.append('executable')\nfinal_score = base_score * multiplier\ncontent = getattr(example, 'code', str(example))\ntoken_count = self.token_counter.count_tokens(content, ContentType.CODE)\nreturn PriorityScore(item_id=f'example_{index}', item_type='example', score=final_score, token_count=token_count, reasons=reasons)",
      "description": "Usage example from function _score_example",
      "file_path": "/workspaces/SYSC4918/src/utils/content_prioritizer.py",
      "line_number": 295,
      "example_type": "example_function",
      "language": "python",
      "is_executable": true
    },
    {
      "title": "Example function: _extract_examples",
      "code": "'Extract code examples using the example parser.'\ntry:\n    examples = []\n    for module in structure.modules:\n        module_examples = self.example_parser.extract_from_module(module)\n        examples.extend(module_examples)\n    return examples\nexcept Exception as e:\n    error_msg = f'Error extracting examples: {str(e)}'\n    logger.error(error_msg)\n    self.parsing_errors.append(error_msg)\n    return []",
      "description": "Usage example from function _extract_examples",
      "file_path": "/workspaces/SYSC4918/src/parser/project_parser.py",
      "line_number": 308,
      "example_type": "example_function",
      "language": "python",
      "is_executable": true
    },
    {
      "title": "Example function: extract_code_examples",
      "code": "'\\n    Extract code examples from a module.\\n    \\n    Args:\\n        module: ModuleInfo object to extract examples from\\n        \\n    Returns:\\n        List of CodeExample objects\\n    '\nparser = ExampleParser()\nreturn parser.extract_from_module(module)",
      "description": "Usage example from function extract_code_examples",
      "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py",
      "line_number": 568,
      "example_type": "example_function",
      "language": "python",
      "is_executable": true
    },
    {
      "title": "Example function: parse_docstring_examples",
      "code": "'\\n    Parse code examples from a docstring.\\n    \\n    Args:\\n        docstring: Docstring text to parse\\n        context: Context description for the examples\\n        \\n    Returns:\\n        List of CodeExample objects\\n    '\nparser = ExampleParser()\nreturn parser._extract_from_docstring(docstring, context)",
      "description": "Usage example from function parse_docstring_examples",
      "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py",
      "line_number": 582,
      "example_type": "example_function",
      "language": "python",
      "is_executable": true
    },
    {
      "title": "Example function: find_usage_patterns",
      "code": "'\\n    Find usage patterns in a Python project.\\n    \\n    Args:\\n        project_path: Path to project root\\n        \\n    Returns:\\n        List of CodeExample objects\\n    '\nparser = ExampleParser()\nreturn parser.extract_from_project(project_path)",
      "description": "Usage example from function find_usage_patterns",
      "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py",
      "line_number": 597,
      "example_type": "example_function",
      "language": "python",
      "is_executable": true
    },
    {
      "title": "Example function: _extract_example_sections",
      "code": "'Extract example sections from docstring.'\nexamples = []\nexample_sections = self.example_patterns['example_section'].findall(docstring)\nfor i, section in enumerate(example_sections):\n    code_lines = []\n    for line in section.split('\\n'):\n        line = line.strip()\n        if line and (not line.startswith(('Args:', 'Returns:', 'Raises:', 'Note:'))):\n            if line.startswith(('>>>', '...', 'import ', 'from ')) or '(' in line or '=' in line or line.endswith(':'):\n                code_lines.append(line)\n    if code_lines:\n        code = '\\n'.join(code_lines)\n        example = CodeExample(title=f'Example from {context}', code=code, description=f'Example section {i + 1}', file_path=file_path, example_type='example_section', is_executable=self._is_executable_code(code))\n        examples.append(example)\nreturn examples",
      "description": "Usage example from function _extract_example_sections",
      "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py",
      "line_number": 255,
      "example_type": "example_function",
      "language": "python",
      "is_executable": true
    },
    {
      "title": "Example function: _extract_main_block_examples",
      "code": "'Extract examples from if __name__ == \"__main__\": blocks.'\nexamples = []\nfor node in ast.walk(tree):\n    if isinstance(node, ast.If):\n        if self._is_main_block(node):\n            code_lines = []\n            for stmt in node.body:\n                try:\n                    code_lines.append(ast.unparse(stmt))\n                except Exception:\n                    pass\n            if code_lines:\n                code = '\\n'.join(code_lines)\n                example = CodeExample(title=f'Main block example from {Path(file_path).name}', code=code, description='Example usage from main block', file_path=file_path, line_number=node.lineno, example_type='main_block', is_executable=True)\n                examples.append(example)\nreturn examples",
      "description": "Usage example from function _extract_main_block_examples",
      "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py",
      "line_number": 314,
      "example_type": "example_function",
      "language": "python",
      "is_executable": true
    },
    {
      "title": "Example function: _extract_example_functions",
      "code": "'Extract example functions.'\nexamples = []\nfor node in ast.walk(tree):\n    if isinstance(node, ast.FunctionDef):\n        if any((indicator in node.name.lower() for indicator in self.usage_indicators)):\n            code_lines = []\n            for stmt in node.body:\n                try:\n                    code_lines.append(ast.unparse(stmt))\n                except Exception:\n                    pass\n            if code_lines:\n                code = '\\n'.join(code_lines)\n                example = CodeExample(title=f'Example function: {node.name}', code=code, description=f'Usage example from function {node.name}', file_path=file_path, line_number=node.lineno, example_type='example_function', is_executable=True)\n                examples.append(example)\nreturn examples",
      "description": "Usage example from function _extract_example_functions",
      "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py",
      "line_number": 346,
      "example_type": "example_function",
      "language": "python",
      "is_executable": true
    },
    {
      "title": "Example function: _find_example_files",
      "code": "'Find example files in the project.'\nexample_files = []\nexample_dirs = ['examples', 'example', 'demos', 'demo', 'samples', 'sample']\nfor dir_name in example_dirs:\n    example_dir = project_path / dir_name\n    if example_dir.exists():\n        for pattern in self.example_file_patterns:\n            files = find_files_by_pattern(str(example_dir), pattern)\n            example_files.extend(files)\nfor pattern in self.example_file_patterns:\n    files = find_files_by_pattern(str(project_path), pattern, recursive=False)\n    example_files.extend(files)\nreturn example_files",
      "description": "Usage example from function _find_example_files",
      "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py",
      "line_number": 378,
      "example_type": "example_function",
      "language": "python",
      "is_executable": true
    },
    {
      "title": "Example function: _extract_from_example_file",
      "code": "'Extract examples from example files.'\nexamples = []\ntry:\n    content = read_file_safely(file_path)\n    if not content:\n        return examples\n    tree = ast.parse(content)\n    module_docstring = ast.get_docstring(tree)\n    if module_docstring:\n        docstring_examples = self._extract_from_docstring(module_docstring, f'Example file {Path(file_path).name}', file_path)\n        examples.extend(docstring_examples)\n    example = CodeExample(title=f'Example: {Path(file_path).stem}', code=content, description=f'Complete example from {Path(file_path).name}', file_path=file_path, example_type='example_file', is_executable=True)\n    examples.append(example)\nexcept Exception as e:\n    logger.error(f'Error extracting from example file {file_path}: {e}')\nreturn examples",
      "description": "Usage example from function _extract_from_example_file",
      "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py",
      "line_number": 399,
      "example_type": "example_function",
      "language": "python",
      "is_executable": true
    },
    {
      "title": "Example function: _extract_usage_from_test_file",
      "code": "'Extract usage patterns from a test file.'\nexamples = []\ntry:\n    content = read_file_safely(test_file)\n    if not content:\n        return examples\n    tree = ast.parse(content)\n    for node in ast.walk(tree):\n        if isinstance(node, ast.FunctionDef) and node.name.startswith('test_'):\n            code_lines = []\n            for stmt in node.body:\n                if isinstance(stmt, ast.Expr) or isinstance(stmt, ast.Assign):\n                    try:\n                        line = ast.unparse(stmt)\n                        if any((pattern in line for pattern in ['assert', '=', '('])):\n                            code_lines.append(line)\n                    except Exception:\n                        pass\n            if code_lines and len(code_lines) <= 5:\n                code = '\\n'.join(code_lines)\n                example = CodeExample(title=f'Test usage: {node.name}', code=code, description=f'Usage pattern from test {node.name}', file_path=test_file, line_number=node.lineno, example_type='test_usage', is_executable=False)\n                examples.append(example)\nexcept Exception as e:\n    logger.error(f'Error parsing test file {test_file}: {e}')\nreturn examples",
      "description": "Usage example from function _extract_usage_from_test_file",
      "file_path": "/workspaces/SYSC4918/src/parser/example_parser.py",
      "line_number": 494,
      "example_type": "example_function",
      "language": "python",
      "is_executable": true
    }
  ],
  "parsing_errors": [
    "Error parsing code in /workspaces/SYSC4918/src/models/__init__.py: Error parsing /workspaces/SYSC4918/src/models/__init__.py: Could not read file: /workspaces/SYSC4918/src/models/__init__.py"
  ],
  "parsing_timestamp": "2025-07-29T21:23:44.338603",
  "serialization_info": {
    "timestamp": "2025-07-29T21:23:44.375383",
    "version": "1.0.0",
    "token_optimized": true
  },
  "token_count": 43515
}