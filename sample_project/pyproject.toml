[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "sample-project"
version = "1.2.3"
description = "A comprehensive sample Python project for testing README generation"
authors = [
    {name = "John Developer", email = "john.dev@example.com"},
    {name = "Jane Coder", email = "jane.coder@example.com"}
]
maintainers = [
    {name = "John Developer", email = "john.dev@example.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities"
]
keywords = ["sample", "example", "demo", "cli", "utility"]
dependencies = [
    "requests>=2.25.0",
    "click>=8.0.0",
    "pydantic>=1.8.0,<3.0.0",
    "rich>=10.0.0",
    "typer>=0.4.0",
    "pyyaml>=6.0",
    "configparser>=5.0.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=22.0.0",
    "flake8>=4.0.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0"
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "coverage>=6.0.0"
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0"
]
async = [
    "aiohttp>=3.8.0",
    "asyncio-mqtt>=0.11.0"
]

[project.urls]
Homepage = "https://github.com/example/sample-project"
Documentation = "https://sample-project.readthedocs.io/"
Repository = "https://github.com/example/sample-project.git"
"Bug Reports" = "https://github.com/example/sample-project/issues"
"Source Code" = "https://github.com/example/sample-project"
Changelog = "https://github.com/example/sample-project/blob/main/CHANGELOG.md"
"Funding" = "https://github.com/sponsors/example"

[project.scripts]
sample-cli = "sample_project.cli:main"
sample-tool = "sample_project.main:run_tool"

[project.entry-points."console_scripts"]
sample-project = "sample_project.cli:main"

[project.entry-points."sample_project.plugins"]
default = "sample_project.plugins:DefaultPlugin"
advanced = "sample_project.plugins:AdvancedPlugin"

[tool.setuptools]
package-dir = {"" = "."}

[tool.setuptools.packages.find]
where = ["."]
include = ["sample_project*"]
exclude = ["tests*", "docs*", "scripts*"]

[tool.setuptools.package-data]
sample_project = ["data/*.json", "templates/*.txt", "config/*.yaml"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests"
]

[tool.coverage.run]
source = ["sample_project"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/venv/*",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
