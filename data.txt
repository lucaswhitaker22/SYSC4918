================================================================================
PROJECT ANALYSIS REPORT - 2025-07-16 18:51:21
================================================================================

üìÅ BASIC PROJECT INFORMATION
----------------------------------------
Project Name: readme-generator
Root Path: /workspaces/SYSC4918
Setup File: /workspaces/SYSC4918/setup.py
Requirements File: /workspaces/SYSC4918/requirements.txt
Parsing Time: 0.05 seconds

üéØ MAIN MODULES (1 found)
----------------------------------------
 1. src/main.py

üöÄ ENTRY POINTS (4 found)
----------------------------------------
 1. python src/main.py
 2. readme-gen (console script)
 3. readme-generator (console script)
 4. readme-gen (console script)

üì¶ DEPENDENCIES (19 found)
----------------------------------------
 1. tiktoken
 2. openai
 3. google-generativeai
 4. anthropic
 5. jinja2
 6. click
 7. rich
 8. pydantic
 9. tomli
10. requests
11. python-dotenv
12. pathspec
13. pytest
14. pytest-cov
15. black
16. flake8
17. mypy
18. sphinx
19. sphinx-rtd-theme

üóÇÔ∏è  PROJECT STRUCTURE SUMMARY
----------------------------------------
Total Directories: 5
Total Files: 18
Python Files: 14

üìÅ DETAILED PROJECT STRUCTURE
----------------------------------------
Directory: ./ (7 files)
  Python files:
    - __init__.py
    - concat.py
    - setup.py
  Config files:
    - cocat.txt
    - pyproject.toml
    - requirements.txt
  Other files:
    - README.md

Directory: src/ (1 files)
  Python files:
    - main.py

Directory: src/models/ (2 files)
  Python files:
    - __init__.py
    - project_info.py

Directory: src/parsing/ (6 files)
  Python files:
    - __init__.py
    - ast_parser.py
    - file_scanner.py
    - metadata_extractor.py
    - project_detector.py
    - tempCodeRunnerFile.py

Directory: src/utils/ (2 files)
  Python files:
    - __init__.py
    - file_utils.py

üìä FILE TYPE DISTRIBUTION
----------------------------------------
.py              14 files
.txt              2 files
.md               1 files
.toml             1 files

üìè DIRECTORY ANALYSIS
----------------------------------------
Maximum Directory Depth: 2
Largest Directories:
  ./                               7 files
  src/parsing/                     6 files
  src/utils/                       2 files
  src/models/                      2 files
  src/                             1 files

üîç PARSING VALIDATION RESULTS
----------------------------------------
[PASS] Project name detected
[PASS] Project structure mapped
[PASS] Python files found
[PASS] Setup configuration found
[PASS] Dependencies identified
[PASS] Main modules identified
[PASS] Entry points detected
[PASS] Valid root path

Validation Score: 8/8 (100.0%)
‚úÖ All validations passed! Project parsing is complete.

================================================================================

================================================================================
PROJECT ANALYSIS REPORT - 2025-07-16 18:54:32
================================================================================

üìÅ BASIC PROJECT INFORMATION
----------------------------------------
Project Name: readme-generator
Root Path: /workspaces/SYSC4918
Setup File: /workspaces/SYSC4918/setup.py
Requirements File: /workspaces/SYSC4918/requirements.txt
Parsing Time: 0.10 seconds

üéØ MAIN MODULES (1 found)
----------------------------------------
 1. src/main.py

üöÄ ENTRY POINTS (4 found)
----------------------------------------
 1. python src/main.py
 2. readme-gen (console script)
 3. readme-generator (console script)
 4. readme-gen (console script)

üì¶ DEPENDENCIES (19 found)
----------------------------------------
 1. tiktoken
 2. openai
 3. google-generativeai
 4. anthropic
 5. jinja2
 6. click
 7. rich
 8. pydantic
 9. tomli
10. requests
11. python-dotenv
12. pathspec
13. pytest
14. pytest-cov
15. black
16. flake8
17. mypy
18. sphinx
19. sphinx-rtd-theme

üóÇÔ∏è  PROJECT STRUCTURE SUMMARY
----------------------------------------
Total Directories: 5
Total Files: 19
Python Files: 14

üìÅ DETAILED PROJECT STRUCTURE
----------------------------------------
Directory: ./ (8 files)
  Python files:
    - __init__.py
    - concat.py
    - setup.py
  Config files:
    - cocat.txt
    - data.txt
    - pyproject.toml
    - requirements.txt
  Other files:
    - README.md

Directory: src/ (1 files)
  Python files:
    - main.py

Directory: src/models/ (2 files)
  Python files:
    - __init__.py
    - project_info.py

Directory: src/parsing/ (6 files)
  Python files:
    - __init__.py
    - ast_parser.py
    - file_scanner.py
    - metadata_extractor.py
    - project_detector.py
    - tempCodeRunnerFile.py

Directory: src/utils/ (2 files)
  Python files:
    - __init__.py
    - file_utils.py

üìä FILE TYPE DISTRIBUTION
----------------------------------------
.py              14 files
.txt              3 files
.md               1 files
.toml             1 files

üìè DIRECTORY ANALYSIS
----------------------------------------
Maximum Directory Depth: 2
Largest Directories:
  ./                               8 files
  src/parsing/                     6 files
  src/utils/                       2 files
  src/models/                      2 files
  src/                             1 files

üîç PARSING VALIDATION RESULTS
----------------------------------------
[PASS] Project name detected
[PASS] Project structure mapped
[PASS] Python files found
[PASS] Setup configuration found
[PASS] Dependencies identified
[PASS] Main modules identified
[PASS] Entry points detected
[PASS] Valid root path

Validation Score: 8/8 (100.0%)
‚úÖ All validations passed! Project parsing is complete.

================================================================================

================================================================================
PROJECT ANALYSIS REPORT - 2025-07-16 18:56:32
================================================================================

üìÅ BASIC PROJECT INFORMATION
----------------------------------------
Project Name: readme-generator
Root Path: /workspaces/SYSC4918
Setup File: /workspaces/SYSC4918/setup.py
Requirements File: /workspaces/SYSC4918/requirements.txt
Parsing Time: 0.16 seconds
Parsed Python Files: 14

üéØ MAIN MODULES (1 found)
----------------------------------------
 1. src/main.py

üöÄ ENTRY POINTS (4 found)
----------------------------------------
 1. python src/main.py
 2. readme-gen (console script)
 3. readme-generator (console script)
 4. readme-gen (console script)

üì¶ DEPENDENCIES (19 found)
----------------------------------------
 1. tiktoken
 2. openai
 3. google-generativeai
 4. anthropic
 5. jinja2
 6. click
 7. rich
 8. pydantic
 9. tomli
10. requests
11. python-dotenv
12. pathspec
13. pytest
14. pytest-cov
15. black
16. flake8
17. mypy
18. sphinx
19. sphinx-rtd-theme

üìù FILE DOCSTRINGS (0 found)
----------------------------------------
No file docstrings found

üîß FUNCTION COMMENTS (8 files with function comments)
----------------------------------------
File: src/main.py
  Function: main
  Line: 14
  Docstring: Main entry point for the README generator CLI.
  Body Comments: 5 found
    - Line 64: # Validate project path
    - Line 78: # Initialize parser and time the parsing operation
    - Line 84: # Display comprehensive results
    - Line 87: # Test and validate the parsing results
    - Line 91: # Save all parsed data to data.txt

  Function: save_parsed_data_to_file
  Line: 106
  Docstring: Save comprehensive parsed data to a text file.
  Body Comments: 9 found
    - Line 117: # Basic Project Information
    - Line 127: # Main Modules
    - Line 137: # Entry Points
    - Line 147: # Dependencies
    - Line 157: # File Docstrings
    - Line 168: # Function Comments
    - Line 197: # Class Comments
    - Line 226: # Project structure and other existing sections...
    - Line 227: # (Continue with existing code for file structure, statistics, validation, etc.)

  Function: display_parsing_results
  Line: 232
  Docstring: Display comprehensive parsing results.
  Body Comments: 7 found
    - Line 240: # Basic project information
    - Line 248: # Main modules section
    - Line 256: # Entry points section
    - Line 264: # Dependencies section
    - Line 272: # Function Comments section
    - Line 293: # Class Comments section
    - Line 313: # File Docstrings section

  Function: validate_parsing_results
  Line: 323
  Docstring: Validate the parsing results and return validation status.

  Function: display_validation_results
  Line: 342
  Docstring: Display validation results.


File: src/utils/file_utils.py
  Function: safe_read_file
  Line: 16
  Docstring: Safely reads a file's content with comprehensive error handling.

This function attempts to read a f...
  Body Comments: 3 found
    - Line 32: # Try different encodings in order of preference
    - Line 42: # Handle file permission errors or other IO issues
    - Line 46: # If all encodings fail, try reading as binary and decode with error handling

  Function: get_relative_path
  Line: 56
  Docstring: Gets the relative path from base_path to target_path.

Args:
    base_path: The base directory path....
  Body Comments: 4 found
    - Line 71: # Calculate relative path
    - Line 74: # Convert to forward slashes for consistency
    - Line 78: # Paths are not relative to each other, return absolute target path
    - Line 81: # Fallback to string manipulation

  Function: is_text_file
  Line: 85
  Docstring: Determines if a file is likely to be a text file.

This function uses multiple strategies to determi...
  Body Comments: 11 found
    - Line 103: # Convert to Path object for easier manipulation
    - Line 106: # Check if it's a directory
    - Line 110: # Known text file extensions
    - Line 118: # Check file extension
    - Line 122: # Check files without extensions that are commonly text
    - Line 129: # Use mimetypes to guess content type
    - Line 134: # Try to read the beginning of the file to check for binary content
    - Line 137: # Read first 1024 bytes
    - Line 140: # Check for null bytes (common in binary files)
    - Line 144: # Try to decode as UTF-8
    - Line 149: # Try other common encodings

  Function: ensure_directory_exists
  Line: 163
  Docstring: Ensures that a directory exists, creating it if necessary.

Args:
    directory_path: The path to th...

  Function: get_file_size
  Line: 181
  Docstring: Gets the size of a file in bytes.

Args:
    filepath: The path to the file.

Returns:
    The file ...

  Function: is_python_package
  Line: 197
  Docstring: Determines if a directory is a Python package (contains __init__.py).

Args:
    directory_path: The...

  Function: get_file_extension
  Line: 214
  Docstring: Gets the file extension from a filepath.

Args:
    filepath: The path to the file.

Returns:
    Th...

  Function: normalize_path
  Line: 227
  Docstring: Normalizes a file path by resolving relative components and converting separators.

Args:
    path: ...

  Function: count_tokens
  Line: 242
  Docstring: Count tokens for specific LLM model using tiktoken.

Args:
    text: The text to count tokens for
  ...
  Preceding Comments: 1 found
    - # New Enhanced Functions for LLM Integration
  Body Comments: 5 found
    - Line 257: # Fallback estimation: roughly 1.3 tokens per word
    - Line 261: # Map common model names to tiktoken encodings
    - Line 271: # Try to get encoding for the specific model
    - Line 275: # Try direct model name
    - Line 281: # Fallback estimation

  Function: optimize_content_for_llm
  Line: 285
  Docstring: Optimize content to fit within token limits using intelligent truncation.

Args:
    content: The co...
  Body Comments: 6 found
    - Line 302: # Calculate reduction needed
    - Line 305: # Apply various optimization strategies
    - Line 308: # 1. Remove excessive whitespace
    - Line 312: # 2. Remove comments (but preserve docstrings)
    - Line 315: # 3. Compress long functions if still too long
    - Line 319: # 4. Truncate by priority if still too long

  Function: _remove_comments
  Line: 326
  Docstring: Remove comments while preserving docstrings.
  Body Comments: 4 found
    - Line 336: # Check for docstring start/end
    - Line 351: # Remove single-line comments
    - Line 355: # Remove inline comments
    - Line 357: # Simple heuristic: remove everything after # if not in string

  Function: _compress_functions
  Line: 368
  Docstring: Compress long functions by summarizing their content.
  Body Comments: 5 found
    - Line 375: # Find long functions to compress
    - Line 381: # Replace function body with summary
    - Line 387: # Replace lines
    - Line 390: # Keep function signature
    - Line 400: # If AST parsing fails, just return original content

  Function: _truncate_by_priority
  Line: 404
  Docstring: Truncate content by priority, keeping most important parts.
  Body Comments: 8 found
    - Line 408: # Categorize lines by priority
    - Line 416: # High priority: imports, class/function definitions, docstrings
    - Line 422: # Medium priority: non-empty lines with code
    - Line 426: # Low priority: comments, empty lines
    - Line 430: # Build result by priority
    - Line 433: # Add high priority lines
    - Line 437: # Add medium priority lines if we have token budget
    - Line 447: # Add low priority lines if we still have budget

  Function: extract_code_examples
  Line: 460
  Docstring: Extract code examples from Python files.

Args:
    filepath: Path to the Python file
    
Returns:
...
  Body Comments: 4 found
    - Line 477: # Parse the file as AST
    - Line 480: # Extract if __name__ == "__main__" blocks
    - Line 484: # Extract docstring examples
    - Line 488: # Extract test examples

  Function: _extract_main_blocks
  Line: 498
  Docstring: Extract code from if __name__ == "__main__" blocks.
  Body Comments: 3 found
    - Line 505: # Check if this is a __name__ == "__main__" condition
    - Line 507: # Extract the code block
    - Line 513: # Clean up the block (remove the if statement itself)

  Function: _is_main_guard
  Line: 525
  Docstring: Check if a test node is a __name__ == "__main__" condition.

  Function: _extract_docstring_examples
  Line: 543
  Docstring: Extract code examples from docstrings.
  Body Comments: 1 found
    - Line 551: # Look for code blocks in docstring

  Function: _parse_docstring_examples
  Line: 558
  Docstring: Parse code examples from docstring text.
  Body Comments: 3 found
    - Line 562: # Look for code blocks after "Example:" or "Examples:"
    - Line 567: # Clean up the example
    - Line 572: # Look for code blocks marked with >>> (doctest style)

  Function: _extract_test_examples
  Line: 583
  Docstring: Extract examples from test functions.
  Body Comments: 1 found
    - Line 590: # This is a test function

  Function: create_template_content
  Line: 598
  Docstring: Create content from template variables for README generation.

Args:
    template_vars: Dictionary o...
  Body Comments: 7 found
    - Line 609: # {project_name}
    - Line 613: ## Installation
    - Line 617: ## Usage
    - Line 621: ## Project Structure
    - Line 626: ## Dependencies
    - Line 630: ## Contributing
    - Line 634: ## License

  Function: estimate_content_tokens
  Line: 642
  Docstring: Estimate token counts for different content sections.

Args:
    content_dict: Dictionary of content...

  Function: chunk_content_by_tokens
  Line: 664
  Docstring: Split content into chunks based on token limits.

Args:
    content: Content to chunk
    max_tokens...
  Body Comments: 3 found
    - Line 690: # Save current chunk
    - Line 693: # Start new chunk with overlap
    - Line 713: # Add final chunk

  Function: get_content_summary
  Line: 720
  Docstring: Generate a brief summary of content.

Args:
    content: Content to summarize
    max_length: Maximu...
  Body Comments: 1 found
    - Line 734: # Extract first paragraph or docstring


File: src/parsing/__init__.py
  Function: __init__
  Line: 34

  Function: parse_project
  Line: 38
  Docstring: Orchestrates all parsing operations to analyze a Python project.

Args:
    root_path: Path to the r...
  Body Comments: 7 found
    - Line 48: # Validate root path
    - Line 52: # Initialize ProjectInfo with root path
    - Line 55: # Step 1: Scan directory structure
    - Line 59: # Step 2: Detect key project files
    - Line 67: # Step 3: Extract project metadata
    - Line 72: # Step 4: Identify main modules and entry points
    - Line 77: # Step 5: Parse Python files for comments and additional context

  Function: _extract_project_name
  Line: 84
  Docstring: Extract project name from available sources.
  Body Comments: 1 found
    - Line 91: # Fallback to directory name

  Function: _extract_dependencies
  Line: 94
  Docstring: Extract dependencies from all available sources.
  Body Comments: 4 found
    - Line 98: # From requirements.txt
    - Line 103: # From setup.py
    - Line 109: # From pyproject.toml
    - Line 115: # Remove duplicates while preserving order

  Function: _parse_python_files_with_comments
  Line: 118
  Docstring: Parse Python files and extract function comments.
  Body Comments: 6 found
    - Line 120: # Get all Python files from the project structure
    - Line 129: # Parse each Python file
    - Line 138: # Store file docstring
    - Line 142: # Store function comments
    - Line 146: # Store class comments
    - Line 150: # Track successfully parsed files


File: src/parsing/ast_parser.py
  Function: extract_docstrings
  Line: 538
  Docstring: Extract all docstrings from an AST node.
  Preceding Comments: 1 found
    - # Keep existing standalone functions for backward compatibility

  Function: __init__
  Line: 15

  Function: parse_python_file
  Line: 19
  Docstring: Parses a Python file and extracts comprehensive structural information
including function comments, ...
  Body Comments: 5 found
    - Line 48: # Store source lines for comment extraction
    - Line 53: # Extract module-level docstring
    - Line 56: # Extract imports
    - Line 59: # Extract functions and classes with enhanced comment parsing
    - Line 66: # Extract constants (module-level assignments)

  Function: extract_functions_classes_with_comments
  Line: 80
  Docstring: Enhanced extraction of functions and classes with comprehensive comment parsing.

Args:
    ast_node...

  Function: _extract_function_info_with_comments
  Line: 115
  Docstring: Extracts detailed information from a function definition including all comments.

Args:
    node: Th...
  Body Comments: 1 found
    - Line 138: # Extract comments associated with this function

  Function: _extract_class_info_with_comments
  Line: 146
  Docstring: Extracts detailed information from a class definition including all comments.

Args:
    node: The c...
  Body Comments: 2 found
    - Line 171: # Extract class attributes
    - Line 193: # Extract comments associated with this class

  Function: _extract_function_comments
  Line: 201
  Docstring: Extracts all types of comments associated with a function.

Args:
    node: The function definition ...
  Body Comments: 3 found
    - Line 221: # Extract comments immediately before the function definition
    - Line 224: # Extract inline comments in function signature
    - Line 228: # Extract comments within function body

  Function: _extract_class_comments
  Line: 233
  Docstring: Extracts all types of comments associated with a class.

Args:
    node: The class definition AST no...
  Body Comments: 3 found
    - Line 253: # Extract comments immediately before the class definition
    - Line 256: # Extract inline comments in class signature
    - Line 260: # Extract comments within class body (excluding method comments)

  Function: _get_preceding_comments
  Line: 265
  Docstring: Gets comments immediately preceding a function or class definition.

Args:
    line_number: The line...
  Body Comments: 2 found
    - Line 280: # Look backwards from the function/class definition
    - Line 287: # Stop at first non-comment, non-empty line

  Function: _get_inline_comments
  Line: 292
  Docstring: Gets inline comments within a range of lines.

Args:
    start_line: Starting line number.
    end_l...
  Body Comments: 3 found
    - Line 308: # Look for inline comments (# after code)
    - Line 310: # Simple heuristic: find # that's not in a string
    - Line 312: # Check if it's not inside quotes (basic check)

  Function: _get_function_body_comments
  Line: 323
  Docstring: Gets comments within a function body.

Args:
    node: The function definition AST node.

Returns:
 ...
  Body Comments: 1 found
    - Line 344: # Look for comment-only lines within function body

  Function: _get_class_body_comments
  Line: 350
  Docstring: Gets comments within a class body (excluding method comments).

Args:
    node: The class definition...
  Body Comments: 2 found
    - Line 368: # Get line numbers of methods to exclude their comments
    - Line 380: # Look for comment-only lines within class body

  Function: get_imports
  Line: 387
  Docstring: Extract import statements from an AST node.
  Preceding Comments: 1 found
    - # Keep existing helper methods

  Function: _extract_function_args
  Line: 416
  Docstring: Extract function argument information.
  Body Comments: 4 found
    - Line 420: # Regular arguments
    - Line 429: # Handle defaults
    - Line 437: # *args
    - Line 446: # **kwargs

  Function: _extract_constants
  Line: 457
  Docstring: Extract module-level constants.

  Function: _get_decorator_name
  Line: 474
  Docstring: Get the name of a decorator.

  Function: _get_base_class_name
  Line: 482
  Docstring: Get the name of a base class.

  Function: _get_attribute_name
  Line: 490
  Docstring: Get the name of an attribute node.

  Function: _get_annotation
  Line: 498
  Docstring: Get string representation of type annotation.

  Function: _get_return_annotation
  Line: 512
  Docstring: Get return type annotation.

  Function: _get_default_value
  Line: 516
  Docstring: Get string representation of default value.

  Function: _get_constant_value
  Line: 526
  Docstring: Get string representation of constant value.


File: src/parsing/file_scanner.py
  Function: should_ignore_path
  Line: 81
  Docstring: Enhanced path filtering with better pattern matching.

Args:
    path: The pathlib.Path object to ch...
  Body Comments: 4 found
    - Line 94: # Check for ignored directory names
    - Line 98: # Check for ignored patterns
    - Line 102: # Check for temporary files
    - Line 106: # Check for backup files

  Function: is_python_file
  Line: 113
  Docstring: Enhanced Python file detection.

Args:
    filepath: Path to check
    
Returns:
    True if it's a ...
  Body Comments: 2 found
    - Line 125: # Standard Python files
    - Line 129: # Python files without extension (scripts)

  Function: calculate_file_importance
  Line: 142
  Docstring: Calculate importance score for LLM context prioritization.

Args:
    filepath: Path to the file
   ...
  Body Comments: 14 found
    - Line 157: # Main module patterns get highest priority
    - Line 162: # Setup and configuration files
    - Line 167: # Example files are valuable for usage demonstration
    - Line 172: # API and web framework entry points
    - Line 177: # Django specific files
    - Line 182: # Configuration files
    - Line 187: # Test files (important for understanding usage)
    - Line 191: # Documentation files
    - Line 196: # Utility and helper files
    - Line 201: # Files in root directory get bonus
    - Line 205: # Files in src/ directory get bonus
    - Line 209: # Python files get base score
    - Line 213: # Penalty for deeply nested files
    - Line 217: # Penalty for very long filenames (likely auto-generated)

  Function: detect_framework_files
  Line: 224
  Docstring: Identify framework-specific files and patterns.

Args:
    file_structure: Dictionary mapping direct...
  Body Comments: 5 found
    - Line 237: # Flatten file structure for analysis
    - Line 247: # Check for specific files
    - Line 252: # Check for directories
    - Line 257: # Basic pattern matching in filenames
    - Line 262: # If score is high enough, consider framework detected

  Function: identify_example_files
  Line: 269
  Docstring: Identify example and demo files in the project.

Args:
    file_structure: Dictionary mapping direct...
  Body Comments: 2 found
    - Line 286: # Check if filename contains example keywords
    - Line 290: # Check if directory name suggests examples

  Function: categorize_files
  Line: 299
  Docstring: Categorize files by their purpose and importance.

Args:
    file_structure: Dictionary mapping dire...
  Body Comments: 8 found
    - Line 325: # Core modules
    - Line 330: # Utility modules
    - Line 335: # Test files
    - Line 340: # Example files
    - Line 345: # Configuration files
    - Line 350: # Documentation
    - Line 355: # Web framework files
    - Line 360: # Data science files

  Function: scan_directory
  Line: 368
  Docstring: Enhanced directory scanning with better structure mapping.

Args:
    root_path: Root directory path...
  Body Comments: 6 found
    - Line 393: # Prune ignored directories early for efficiency
    - Line 396: # Skip processing if current directory should be ignored
    - Line 400: # Filter and sort files
    - Line 407: # Only include directories that have files
    - Line 411: # Normalize path representation
    - Line 417: # Sort files for consistent output

  Function: get_file_statistics
  Line: 423
  Docstring: Generate statistics about the project file structure.

Args:
    file_structure: Dictionary mapping ...
  Body Comments: 6 found
    - Line 446: # Count Python files
    - Line 450: # Count test files
    - Line 454: # Count config files
    - Line 460: # Count documentation files
    - Line 466: # Track directory depth
    - Line 470: # Track largest directory

  Function: prioritize_files_for_llm
  Line: 478
  Docstring: Prioritize files for LLM processing based on importance scores.

Args:
    file_structure: Dictionar...
  Body Comments: 2 found
    - Line 497: # Only include files with reasonable importance
    - Line 501: # Sort by importance score (descending) and limit results


File: src/parsing/metadata_extractor.py
  Function: extract_project_name
  Line: 19
  Docstring: Extracts the project name from setup.py or pyproject.toml files.

Args:
    setup_file: Path to the ...

  Function: parse_dependencies
  Line: 48
  Docstring: Parses dependencies from a requirements.txt file.

Args:
    requirements_file: Path to the requirem...
  Body Comments: 3 found
    - Line 65: # Skip empty lines and comments
    - Line 69: # Skip git URLs and local file paths
    - Line 73: # Extract package name (remove version specifiers)

  Function: extract_setup_metadata
  Line: 84
  Docstring: Extracts metadata from a setup.py file using AST parsing.

Args:
    setup_file: Path to the setup.p...
  Body Comments: 2 found
    - Line 107: # Extract keyword arguments from setup() call
    - Line 115: # Extract install_requires for dependencies

  Function: parse_pyproject_toml
  Line: 128
  Docstring: Parses a pyproject.toml file and extracts relevant metadata.

Args:
    toml_file: Path to the pypro...

  Function: extract_license_info
  Line: 148
  Docstring: Extract license information from various sources.

Args:
    root_path: Root directory path of the p...
  Body Comments: 2 found
    - Line 171: # Check setup.py for license info
    - Line 179: # Check pyproject.toml for license info

  Function: detect_license_type
  Line: 191
  Docstring: Detect license type from license file content.

Args:
    content: License file content
    
Returns...
  Body Comments: 1 found
    - Line 203: # Common license patterns

  Function: extract_version_info
  Line: 224
  Docstring: Extract version information from multiple sources.

Args:
    root_path: Root directory path of the ...
  Body Comments: 4 found
    - Line 235: # Check __init__.py for __version__
    - Line 240: # Check setup.py/pyproject.toml
    - Line 246: # Check VERSION file
    - Line 251: # Check git tags

  Function: _extract_version_from_init
  Line: 259
  Docstring: Extract version from __init__.py files.
  Body Comments: 2 found
    - Line 266: # Also check package directories
    - Line 271: # Check src/ subdirectories

  Function: _extract_version_from_setup
  Line: 298
  Docstring: Extract version from setup.py or pyproject.toml.

  Function: _extract_version_from_version_file
  Line: 314
  Docstring: Extract version from VERSION file.
  Body Comments: 1 found
    - Line 323: # Simple version validation

  Function: _extract_version_from_git_tags
  Line: 332
  Docstring: Extract version from git tags.
  Body Comments: 2 found
    - Line 335: # Get the latest git tag
    - Line 346: # Clean up common tag prefixes

  Function: parse_configuration_files
  Line: 358
  Docstring: Parse additional configuration files.

Args:
    root_path: Root directory path of the project
    
...
  Body Comments: 3 found
    - Line 370: # Parse INI-style configuration files
    - Line 386: # Parse JSON configuration files
    - Line 399: # Parse YAML configuration files

  Function: parse_ini_file
  Line: 410
  Docstring: Parse INI-style configuration file.

Args:
    file_path: Path to the INI file
    
Returns:
    Dic...

  Function: extract_dependencies_from_pyproject
  Line: 434
  Docstring: Extracts dependencies from parsed pyproject.toml data.

Args:
    toml_data: Parsed TOML data from p...
  Body Comments: 2 found
    - Line 446: # Standard Python packaging format
    - Line 450: # Poetry format

  Function: _extract_name_from_setup_cfg
  Line: 459
  Docstring: Extracts the project name from a setup.cfg file.

Args:
    setup_cfg_file: Path to the setup.cfg fi...

  Function: _extract_list_from_ast
  Line: 482
  Docstring: Extracts a list of strings from an AST node.

Args:
    node: The AST node to extract from.

Returns...

  Function: extract_project_metadata_comprehensive
  Line: 504
  Docstring: Extract comprehensive project metadata from all available sources.

Args:
    root_path: Root direct...
  Body Comments: 6 found
    - Line 526: # Extract from setup files
    - Line 547: # Extract version from multiple sources
    - Line 550: # Extract license information
    - Line 553: # Extract dependencies
    - Line 558: # Parse configuration files
    - Line 561: # Check for tests and documentation


File: src/parsing/project_detector.py
  Function: find_setup_files
  Line: 45
  Docstring: Finds setup and configuration files in the project root.

Args:
    root_path: The root directory of...
  Body Comments: 1 found
    - Line 61: # Check in order of priority

  Function: find_requirements_files
  Line: 70
  Docstring: Finds requirements files in the project root.

Args:
    root_path: The root directory of the projec...

  Function: identify_main_modules
  Line: 94
  Docstring: Identifies main modules from the project file structure.
Enhanced to handle both flat and src-layout...
  Body Comments: 4 found
    - Line 107: # Check root directory first
    - Line 113: # Check src/ directory (common Python project layout)
    - Line 119: # Look for __main__.py in subdirectories (package entry points)
    - Line 124: # Look for files with "main" in the name in root and src directories

  Function: detect_entry_points
  Line: 136
  Docstring: Detects potential entry points for the project.
Enhanced to handle both flat and src-layout projects...
  Body Comments: 6 found
    - Line 153: # Check for executable Python files in root
    - Line 159: # Check src/ directory for main files
    - Line 167: # Check if project can be run as a module (has __main__.py)
    - Line 172: # Check for packages with __main__.py in src/
    - Line 180: # Check for setup.py entry points
    - Line 186: # Check for pyproject.toml entry points

  Function: determine_project_type
  Line: 195
  Docstring: Determines if the project is a package or a script.

Args:
    root_path: The root directory of the ...
  Body Comments: 5 found
    - Line 208: # Check for setup files (strong indicator of a package)
    - Line 213: # Check for __init__.py files (indicates package structure)
    - Line 218: # Check for src/ directory with packages
    - Line 223: # Check for multiple Python modules in subdirectories
    - Line 232: # Default to script if no package indicators found

  Function: infer_project_domain
  Line: 236
  Docstring: Infer project domain from structure and dependencies.

Args:
    file_structure: Dictionary mapping ...
  Body Comments: 11 found
    - Line 248: # Data science indicators
    - Line 254: # Machine learning indicators (more specific than data science)
    - Line 260: # Web development indicators
    - Line 266: # CLI tool indicators
    - Line 271: # DevOps/Infrastructure indicators
    - Line 277: # Testing framework indicators
    - Line 283: # Game development indicators
    - Line 288: # Scientific computing indicators
    - Line 294: # Check file structure for domain indicators
    - Line 299: # Look for domain-specific file patterns
    - Line 312: # Check directory structure

  Function: detect_deployment_patterns
  Line: 323
  Docstring: Detect deployment and containerization patterns.

Args:
    root_path: Root directory path of the pr...
  Body Comments: 13 found
    - Line 336: # Docker detection
    - Line 341: # Kubernetes detection
    - Line 348: # Check for YAML files that might be Kubernetes manifests
    - Line 359: # Heroku detection
    - Line 364: # AWS detection
    - Line 369: # Google Cloud detection
    - Line 374: # Azure detection
    - Line 379: # GitHub Actions detection
    - Line 384: # GitLab CI detection
    - Line 389: # Travis CI detection
    - Line 394: # Jenkins detection
    - Line 399: # Terraform detection
    - Line 404: # Ansible detection

  Function: detect_framework_patterns
  Line: 414
  Docstring: Detect web frameworks and other major frameworks used in the project.

Args:
    file_structure: Dic...
  Body Comments: 6 found
    - Line 428: # Framework detection based on dependencies
    - Line 454: # Framework detection based on file patterns
    - Line 459: # Django specific files
    - Line 464: # Flask specific patterns
    - Line 469: # FastAPI specific patterns
    - Line 474: # Streamlit specific patterns

  Function: _extract_console_scripts_from_setup
  Line: 481
  Docstring: Extract console scripts from setup.py entry_points.

Args:
    setup_file: Path to the setup.py file...
  Body Comments: 5 found
    - Line 497: # Parse the setup.py file as AST
    - Line 505: # Look for entry_points keyword argument
    - Line 511: # Fallback to regex parsing if AST fails
    - Line 516: # Look for console_scripts patterns
    - Line 521: # Extract script names

  Function: _extract_console_scripts_from_pyproject
  Line: 532
  Docstring: Extract console scripts from pyproject.toml.

Args:
    pyproject_file: Path to the pyproject.toml f...
  Body Comments: 3 found
    - Line 545: # Try to import tomllib (Python 3.11+) or tomli
    - Line 557: # Check for project.scripts
    - Line 562: # Check for tool.poetry.scripts

  Function: _parse_entry_points_from_ast
  Line: 573
  Docstring: Parse entry points from an AST node.

Args:
    node: AST node containing entry points data.

Return...

  Function: get_project_metadata_summary
  Line: 597
  Docstring: Get a comprehensive summary of project metadata.

Args:
    root_path: The root directory of the pro...
  Body Comments: 1 found
    - Line 611: # Get dependencies (simplified)


File: src/models/project_info.py
  Function: calculate_token_estimate
  Line: 67
  Docstring: Calculate estimated token count for LLM context based on project content.
Optimized for Gemini 2.5 F...
  Body Comments: 3 found
    - Line 80: # Map model names to appropriate tokenizers
    - Line 91: # Fallback estimation: roughly 1.3 tokens per word
    - Line 96: # Count tokens from various content sources

  Function: _fallback_token_estimate
  Line: 115
  Docstring: Fallback token estimation when tiktoken is not available.
  Body Comments: 2 found
    - Line 119: # Estimate based on character count
    - Line 133: # Rough estimation: 4 characters per token

  Function: calculate_priority_score
  Line: 138
  Docstring: Calculate overall priority score for content optimization.

Returns:
    Priority score (0.0 to 10.0...
  Body Comments: 7 found
    - Line 147: # Project completeness indicators
    - Line 157: # Documentation quality
    - Line 161: # Function comments quality
    - Line 165: # Usage examples availability
    - Line 169: # Project structure complexity
    - Line 173: # Framework detection bonus
    - Line 177: # API endpoints (for web projects)

  Function: get_high_priority_content
  Line: 184
  Docstring: Extract high-priority content optimized for LLM context window.
Default max_tokens set to 1M for Gem...
  Body Comments: 2 found
    - Line 195: # Calculate current token estimate
    - Line 215: # Add content based on available token budget

  Function: _get_summarized_structure
  Line: 238
  Docstring: Get summarized project structure with file counts.

  Function: _get_top_docstrings
  Line: 247
  Docstring: Get top docstrings up to character limit.

  Function: _get_top_function_comments
  Line: 261
  Docstring: Get top function comments up to character limit.

  Function: _estimate_metadata_tokens
  Line: 276
  Docstring: Estimate tokens used by basic metadata.

  Function: add_docstring
  Line: 281
  Docstring: Add a docstring with optional source file tracking.
  Body Comments: 1 found
    - Line 284: # Avoid duplicates

  Function: add_usage_example
  Line: 288
  Docstring: Add a usage example with optional source file tracking.

  Function: add_function_signature
  Line: 294
  Docstring: Add a function signature to the collection.

  Function: set_file_importance_score
  Line: 299
  Docstring: Set importance score for a specific file.

  Function: get_summary_stats
  Line: 303
  Docstring: Get summary statistics about the project.

  Function: is_within_context_window
  Line: 325
  Docstring: Check if project content fits within the specified context window.

Args:
    max_tokens: Maximum to...

  Function: get_cost_estimate
  Line: 337
  Docstring: Estimate API cost based on token count and model pricing.

Args:
    model: LLM model name
    
Retu...
  Body Comments: 1 found
    - Line 349: # Pricing per 1M tokens (input) based on research

  Function: optimize_for_cost
  Line: 359
  Docstring: Optimize content to stay within cost budget.

Args:
    target_cost: Maximum cost in USD
    
Return...
  Body Comments: 1 found
    - Line 374: # Calculate reduction ratio needed



üèóÔ∏è CLASS COMMENTS (4 files with class comments)
----------------------------------------
File: src/parsing/__init__.py
  Class: CoreParser
  Line: 25
  Docstring: Main orchestrator for parsing Python projects and extracting metadata.

This class coordinates all p...


File: src/parsing/ast_parser.py
  Class: ASTParser
  Line: 9
  Docstring: Enhanced AST parser that extracts structural information and comments
from Python source files.
  Body Comments: 1 found
    - Line 386: # Keep existing helper methods


File: src/parsing/project_detector.py
  Class: ProjectDetector
  Line: 10
  Docstring: Detects key project files and determines project characteristics.

This class is responsible for ide...
  Body Comments: 3 found
    - Line 18: # Common setup/configuration file names
    - Line 21: # Common requirements file names
    - Line 31: # Common main module patterns


File: src/models/project_info.py
  Class: ProjectInfo
  Line: 9
  Docstring: Enhanced data class to store comprehensive information about a parsed Python project.

This object h...
  Body Comments: 8 found
    - Line 16: # Core project information
    - Line 26: # Enhanced metadata for README generation
    - Line 32: # LLM-specific content extraction
    - Line 38: # Content categorization for prioritization
    - Line 45: # Framework and project type detection
    - Line 50: # Token management and optimization (critical for 1M context window)
    - Line 55: # Advanced project analysis
    - Line 61: # Function comment extraction (new enhancement)



================================================================================

